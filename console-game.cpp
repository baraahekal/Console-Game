#include <iostream>
#include <Windows.h>
#include <sstream>

using namespace std;

const int rows = 47;
const int columns = 300;
int tempRow, tempColumn;
char map[400][1500];
int i, k, r, n, c, a = 0, b;
int LevelPointer;
int shopPointer;
int flagDoorShop;
bool GameOver;
int megaFireMode;
int modesNumber = 1;
int megaModesNumber = 1;
bool PlayerDead;
int flagBatBullet = 0;
int bulletsMegaControl;
int flagLaser = 0;
int batsNumber = 3;
int frogsNumber = 1;
int modeSky;
bool backToMenu;
int bulletDamage = 2;
int flagNewHero = 0;
int flagHeroDirection = 1;
int flagMegaManUp = 0;
int flagMegaManShoot = 0;
int cthbh = 0;
int ctClose = 0;
int singleCoinI = 0;
int heroOrCar = 1;
int flagCloseDoor = 0;
int flagDrawHurts1 = 1, ctHurts1 = 0;
int flagDrawHurts2 = 1, ctHurts2 = 0;
int flagDrawHurts3 = 1, ctHurts3 = 0;
int flagDrawHurts4 = 1, ctHurts4 = 0;

int firstElevatorRow = 44;
int firstElevatorColumn = 284;

int secondElevatorRow = 38;
int secondElevatorColumn = 650;

int thirdElevatorRow = 36;
int thirdElevatorColumn = 1280;

int heroCoins = 0;

int flagElevator;

HANDLE windowHandle = GetStdHandle(STD_OUTPUT_HANDLE);

inline int randNum(int min, int max) { return ((rand() % ((max - min) + 1)) + min); }

class SingleCoins
{
public:
    int coinColumn;
    int coinRow;
    int flagCoin;
    char theCoin = '$';

    void DrawSingleCoin(int r, int c)
    {
        map[r][c] = this->theCoin;
    }
};
SingleCoins singleCoin[200];
int coinsNumber = 200;

void setCoinsPositions(int& i, int range, int r, int c)
{
    for (int k = 0; k < range; c += 16, i++, k++)
    {
        singleCoin[i].coinRow = r;
        singleCoin[i].coinColumn = c;
        singleCoin[i].flagCoin = 1;
    }
}

void DrawCoins(int loop)
{
    int p;
    for (p = 0; p < loop; p++)
    {
        if (singleCoin[p].flagCoin)
            singleCoin[p].DrawSingleCoin(singleCoin[p].coinRow, singleCoin[p].coinColumn);
    }

}

class Obstacle
{
protected:
    int obstacleRow;
    int obstacleColumn;

    unsigned char singleObstacle[100]{ 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 0 };
    unsigned char singleObstacleVertical[100]{ 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223,0 };



public:

    void DrawObstacle(int r, int c)
    {
        tempColumn = c;

        for (i = 0; this->singleObstacle[i] != 0; i++)
        {
            if (this->singleObstacle[i] != 10)
                map[r][c++] = this->singleObstacle[i];

            if (this->singleObstacle[i] == 10)
            {
                r++;
                c = tempColumn;
            }
        }

        if (tempColumn > 1000)
            for (i = 0; this->singleObstacleVertical[i] != 0; i++)
            {
                if (this->singleObstacleVertical[i] != 10)
                    map[r][c++] = this->singleObstacleVertical[i];

                if (this->singleObstacleVertical[i] == 10)
                {
                    r++;
                    c = tempColumn;
                }
            }
    }

    inline int getObstacleRow() { return this->obstacleRow; }
    inline int getObstacleColumn() { return this->obstacleColumn; }


    void setObstacleRowTo(int _obstacleRow) { this->obstacleRow = _obstacleRow; }
    void setObstacleColumnTo(int _obstacleColumn) { this->obstacleColumn = _obstacleColumn; }

};

Obstacle obstacle[4];

int obstaclesNumber = 4;

void setObstaclesPositions()
{
    for (i = 0, tempRow = 40, tempColumn = 20; i < obstaclesNumber; i++)
    {

        if (i < 4)
        {
            obstacle[i].setObstacleRowTo(tempRow);
            obstacle[i].setObstacleColumnTo(tempColumn);
            tempRow -= 6;
            tempColumn += 16;
        }
        if (i == 4) {
            tempRow = 20;
            tempColumn = 1280;
        }
        if (i > 4)
        {
            if (i % 3 == 0)
                tempColumn -= 25;
            else if (i % 3 == 1) tempColumn += 25;
            else tempColumn += 25;

            obstacle[i].setObstacleRowTo(tempRow);
            obstacle[i].setObstacleColumnTo(tempColumn);
            tempRow += 13;


            //tempColumn;
        }

    }

}



void DrawObstacles(int loop)
{
    int p;
    for (p = 0; p < loop; p++)
        obstacle[p].DrawObstacle(obstacle[p].getObstacleRow(), obstacle[p].getObstacleColumn());

}

////////////////////////////////////////////////////////////////

void ClearMap()
{
    for (int r = 0; r < 400; r++)
        for (c = 0; c < 1500; c++)
            map[r][c] = ' ';
}




class Art
{
protected:

    int skyRow = 0;
    int skyColumn = 0;

    int groundRow = 46;
    int groundColumn = 0;

    int obstacleRow = 28;
    int obstacleColumn = 12;

    int ladderRow = 25;
    int ladderColumn = 85;

    int singleObstacleRow = 22;
    int singleObstacleColumn = 105;

    int tunnelRow = 14;
    int tunnelColumn = 300;

    

    int levelLaddersRow = 4;
    int levelLadderColumn = 700;

    int waslaRow = 7;
    int waslaColumn = 300;

    int obstacleSeaLevelRowH = 21;
    int  obstacleSeaLevelColumnH = 998;
    int obstacleSeaLevelRowV = 21;
    int obstacleSeaLevelColumnV = 1150;

    int masterLevelRow = 60;
    int masterLevelColumn = 1450;

    int awelNafaqRow = 40;
    int awelNafaqColumn = 1370;

    int closeFightRow = 20;
    int closeFightColumn = 1118;


    string sky =

        "          .-~~~-.                           .-~~~-.                            .-~~~-.                           .-~~~-.                           .-~~~-.                           .-~~~-.                                 .-~~~-.                            .-~~~-.                       \n"
        "  .- ~ ~-(       )_ _               .- ~ ~-(       )_ _                .- ~ ~-(       )_ _               .- ~ ~-(       )_ _               .- ~ ~-(       )_ _               .- ~ ~-(       )_ _                     .- ~ ~-(       )_ _                .- ~ ~-(       )_ _                                        \n"
        " /                     ~ -.        /                     ~ -.         /                     ~ -.        /                     ~ -.        /                     ~ -.        /                     ~ -.              /                     ~ -.         /                     ~ -.                                 \n"
        "|                           )     |                           )      |                           )     |                           )     |                           )     |                           )           |                           )      |                           )                                       \n"
        "\\                         .'      \\                         .'       \\                         .'      \\                         .'      \\                         .'      \\                         .'       \\                         .'       \\                         .'                                              \n"
        "  ``~- . _____________ . -~           ~- . _____________ . -~             ~- . _____________ . -~           ~- . _____________ . -~           ~- . _____________ . -~           ~- . _____________ . -~                ~- . _____________ . -~             ~- . _____________ . -~                            \n";

    string sky2 =

        "     __   _               __   _                                    \n"
        "       _(  )_( )_              _(  )_( )_                             \n"
        "   (_   _    _)         (_   _    _)                        \n"
        "  / /(_) (__)          / /(_) (__)                            \n"
        " / / / / / /          / / / / / /                                    \n"
        "/ / / / / /          / / / / / /                                       \n"
        "______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________\n";

    unsigned char ground[4000] = { 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
        223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223,  223, 223, 223, 223, 223,
        223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
        223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223,  223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
        223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
        223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
        223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
        223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
        223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
        223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223,

                                   0 };


    unsigned char obstacle[1000] = { 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,205,205,205,205,205,205,205,205,205,205,205,10,
           32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,10,
           32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,10,
            32,32,32,32,32,32,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,0 };

    unsigned char ladder[1000] =
    { 206,205,205,205,205,205,205,205,205,205,205,205,205,205,206,10,
     206,205,205,205,205,205,205,205,205,205,205,205,205,205,206 ,10,
     206,205,205,205,205,205,205,205,205,205,205,205,205,205,206,10,
     206,205,205,205,205,205,205,205,205,205,205,205,205,205,206 ,10,
     206,205,205,205,205,205,205,205,205,205,205,205,205,205,206,10,
     206,205,205,205,205,205,205,205,205,205,205,205,205,205,206 ,10,
     206,205,205,205,205,205,205,205,205,205,205,205,205,205,206 ,10,
     206,205,205,205,205,205,205,205,205,205,205,205,205,205,206,10,
     206,205,205,205,205,205,205,205,205,205,205,205,205,205,206 ,10,
     206,205,205,205,205,205,205,205,205,205,205,205,205,205,206,10,
     206,205,205,205,205,205,205,205,205,205,205,205,205,205,206 ,10,
     206,205,205,205,205,205,205,205,205,205,205,205,205,205,206,10,
     206,205,205,205,205,205,205,205,205,205,205,205,205,205,206 ,10,
     206,205,205,205,205,205,205,205,205,205,205,205,205,205,206,10,
     206,205,205,205,205,205,205,205,205,205,205,205,205,205,206 ,10,
     206,205,205,205,205,205,205,205,205,205,205,205,205,205,206 ,10,
     206,205,205,205,205,205,205,205,205,205,205,205,205,205,206,10,
     206,205,205,205,205,205,205,205,205,205,205,205,205,205,206,10,
     206,205,205,205,205,205,205,205,205,205,205,205,205,205,206,10,0 };

    unsigned char tunnel[10000]
    { 223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223, 223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,                         223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223, 223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223   , 223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223, 223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223    ,   10,
       177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,                                                                                            177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177    ,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,10,
       233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,                 33,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,2   ,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233 ,233 ,   10,


       223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,                            223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,10,
       32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,                        32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32    ,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32    ,    10,












       223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,                            223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223    ,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223        ,10,


       205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,      205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,    205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,      205,205,205,205,205,205,205,205,205,205,205,205,205,205    ,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205, 205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205,    10,

       223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,                            223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223    ,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223        ,0 };

    unsigned char square[10000] =
    {



     219,219,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,219,219,10,


     219,219,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,219,10,












     32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,219,10,









     219,219,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,219,10,









     219,219,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,219,219,10,0 };

    unsigned char levelLadders[13000] =
    {

     219,186,219,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     219,186,219,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     219,186,219,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     219,186,219,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     219,186,219,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     219,186,219,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     219,186,219,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     219,186,219,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     219,186,219,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     219,186,219,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     219,186,219,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     219,186,219,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     219,186,219,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     219,186,219,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     219,186,219,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     219,186,219,206,205,205,205,205,205,205,205,205,205,205,205,205,206,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,10,
     219,186,219,206,205,205,205,205,205,205,205,205,205,205,205,205,206,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     219,186,219,206,205,205,205,205,205,205,205,205,205,205,205,205,206,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     219,186,219,206,205,205,205,205,205,205,205,205,205,205,205,205,206,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     219,186,219,206,205,205,205,205,205,205,205,205,205,205,205,205,206,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     219,186,219,206,205,205,205,205,205,205,205,205,205,205,205,205,206,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     219,186,219,206,205,205,205,205,205,205,205,205,205,205,205,205,206,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     219,186,219,206,205,205,205,205,205,205,205,205,205,205,205,205,206,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     219,186,219,206,205,205,205,205,205,205,205,205,205,205,205,205,206,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     219,186,219,206,205,205,205,205,205,205,205,205,205,205,205,205,206,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     219,186,219,206,205,205,205,205,205,205,205,205,205,205,205,205,206,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     219,186,219,206,205,205,205,205,205,205,205,205,205,205,205,205,206,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
     223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,10,








     219,186,219,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 206,205,205,205,205,205,205,205,205,205,205,205,205,206,10,






    };

    unsigned char singleObstacle[100]{ 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223,223,223, 0 };

    unsigned char waslaArt[100]{ 178,  178,  178, 178, 178,  178,  178,178,178,178,178, 178, 10, 10 ,10, 10 , 10, 10 ,  10,10,10,10,10,10,10,10, 178,178, 178,178,178,178 ,178, 178,  178,  178,  178, 178, 178,  178,178,0 };

    unsigned obstacleSeaLevelH[2000] =
    {
        219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,10,
        32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
        32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
        32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
        32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
        32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
        32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
        32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
        32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,10,
        32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
        32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
        32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
        32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
        32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
        32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
          32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
        32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,10,0





    };
    unsigned obstacleSeaLevelV[2000] =
    {
    32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,10,
    32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
    32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
    32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
    32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
    32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
    32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
    32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
    32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,10,
    32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
    32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
    32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
    32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
    32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
    32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
    32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
    219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,10,0
    };

    unsigned  awelNafaq[1000] =
    { 219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,
219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,
219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219, 33,219,219,219,219,219,219,219,219,219,
219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,
219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,
219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,
219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,0 };


    unsigned closeForFight[20] =
    { 219,219,219,219,219,219,219,219,219,219,219,219,219,219 };

public:
    int squareRow = 5;
    int squareColumn = 500;

    int anotherSquareRow = 6;
    int anotherSquareColumn = 1118;
    void DrawSingleElevator(int r, int c)
    {
        for (i = 0; this->singleObstacle[i] != 0; i++)
            map[r][c++] = this->singleObstacle[i];
    }

    void DrawCloseFight()
    {
        if (flagCloseDoor)
        {
            r = this->closeFightRow;
            c = this->closeFightColumn;

            for (i = 0; this->closeForFight[i] != '\0'; i++)
            {
                map[r][c] = this->closeForFight[i];
                map[r++][c + 1] = this->closeForFight[i];
            }
            ctClose++;
            if (ctClose == 1)
            {
                PlaySound(TEXT("sounds\\closeDoor.wav"), NULL, SND_ASYNC);


            }
            //if (ctClose == 3)
                //PlaySound(TEXT("sounds\\danceYaRoo7Omak.wav"), NULL, SND_ASYNC);
        }
    }

    void DrawSky()
    {
        r = this->skyRow;
        c = this->skyColumn;

        if (modeSky == 1)
            for (i = 0; i < this->sky.length(); i++)
            {
                if (this->sky[i] != '\n')
                    map[r][c++] = this->sky[i];

                if (this->sky[i] == '\n')
                {
                    r++;
                    c = this->skyColumn;
                }
            }

        else
            for (i = 0; i < this->sky2.length(); i++)
            {
                if (this->sky2[i] != '\n')
                    map[r][c++] = this->sky2[i];

                if (this->sky2[i] == '\n')
                {
                    r++;
                    c = this->skyColumn;
                }
            }
    }

    void waslaConnect()
    {
        r = this->waslaRow;
        c = this->waslaColumn;

        for (i = 0; this->waslaArt[i] != 0; i++)
        {
            if (this->waslaArt[i] != 10)
                map[r++][c] = this->waslaArt[i];

            if (this->waslaArt[i] == 10)
            {
                r++;

            }
        }
    }

    void DrawobstacleSeaLevelH()
    {


        r = this->obstacleSeaLevelRowH;
        c = this->obstacleSeaLevelColumnH;

        for (i = 0; this->obstacleSeaLevelH[i] != 0; i++)
        {
            if (this->obstacleSeaLevelH[i] != 10)
                map[r][c++] = this->obstacleSeaLevelH[i];

            if (this->obstacleSeaLevelH[i] == 10)
            {
                r++;
                c = this->obstacleSeaLevelColumnH;
            }
        }
    }
    void DrawobstacleSeaLevelV()
    {


        r = this->obstacleSeaLevelRowV;
        c = this->obstacleSeaLevelColumnV;

        for (i = 0; this->obstacleSeaLevelV[i] != 0; i++)
        {
            if (this->obstacleSeaLevelV[i] != 10)
                map[r][c++] = this->obstacleSeaLevelV[i];

            if (this->obstacleSeaLevelV[i] == 10)
            {
                r++;
                c = this->obstacleSeaLevelColumnV;
            }
        }
    }

    void DrawGround()
    {
        r = this->groundRow;
        c = this->groundColumn;

        for (i = 0; this->ground[i] != 0; i++)
        {

            map[r][c++] = this->ground[i];


        }

        r = 7;
        c = 0;
        for (i = 0; this->ground[i] != 0; i++)
        {

            map[r][c++] = this->ground[i];


        }


    }

    void DrawTunnle()
    {
        r = this->tunnelRow;
        c = this->tunnelColumn;

        for (i = 0; this->tunnel[i] != 0; i++)
        {
            if (this->tunnel[i] != 10)
                map[r][c++] = this->tunnel[i];

            if (this->tunnel[i] == 10)
            {
                r++;
                c = this->tunnelColumn;
            }
        }
    }
    void DrawSquare()
    {
        r = this->squareRow;
        c = this->squareColumn;

        for (i = 0; this->square[i] != 0; i++)
        {
            if (this->square[i] != 10)
                map[r][c++] = this->square[i];

            if (this->square[i] == 10)
            {
                r++;
                c = this->squareColumn;
            }
        }
    }

    void DrawAnotherSquare()
    {
        r = this->anotherSquareRow;
        c = this->anotherSquareColumn;

        for (i = 0; this->square[i] != 0; i++)
        {
            if (this->square[i] != 10)
                map[r][c++] = this->square[i];

            if (this->square[i] == 10)
            {
                r++;
                c = this->anotherSquareColumn;
            }
        }
    }
    void DrawLevelLadders()
    {
        r = this->levelLaddersRow;
        c = this->levelLadderColumn;

        for (i = 0; this->levelLadders[i] != 0; i++)
        {
            if (this->levelLadders[i] != 10)
                map[r][c++] = this->levelLadders[i];

            if (this->levelLadders[i] == 10)
            {
                r++;
                c = this->levelLadderColumn;
            }
        }
    }


    void Drawladder()
    {
        r = this->ladderRow;
        c = this->ladderColumn;

        for (i = 0; this->ladder[i] != 0; i++)
        {
            if (this->ladder[i] != 10)
                map[r][c++] = this->ladder[i];

            if (this->ladder[i] == 10)
            {
                r++;
                c = this->ladderColumn;
            }
        }
    }

    void DrawObstacle()
    {
        r = this->obstacleRow;
        c = this->obstacleColumn;

        for (i = 0; this->obstacle[i] != 0; i++)
        {
            if (this->obstacle[i] != 10)
                map[r][c++] = this->obstacle[i];

            if (this->obstacle[i] == 10)
            {
                r += 4;
                c = this->obstacleColumn;
            }
        }
    }

    inline int getLadderRow() { return this->ladderRow; }
    inline int getLadderColumn() { return this->ladderColumn; }

    inline int getTunnelRow() { return this->tunnelRow; }
    inline int getTunnelColumn() { return this->tunnelColumn; }

    void setLadderRowTo(int _ladderRow) { this->ladderRow = _ladderRow; }
    void setLadderColumnTo(int _ladderColumn) { this->ladderColumn = _ladderColumn; }

};

Art art;

////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////
class HeroHealth
{
protected:
    int heroHealthBarRow;
    int heroHealthBarColumn;
    int healthBarSize = 20;
    int heroLifes;
    int remainingHeal;

    char remainingHealChar = 178;
    char goneHealChar = 176;

public:

    void DrawHealthBar(int stillHeal)
    {
        for (i = 0; i < this->healthBarSize; i++)
        {
            if (i <= stillHeal)
                map[this->heroHealthBarRow][this->heroHealthBarColumn + i] = this->remainingHealChar;
            else
                map[this->heroHealthBarRow][this->heroHealthBarColumn + i] = this->goneHealChar;

            int x = heroCoins;
            stringstream ss;
            ss << x;
            string s = ss.str();


            map[heroHealthBarRow + 1][heroHealthBarColumn] = 'C';
            map[heroHealthBarRow + 1][heroHealthBarColumn + 1] = 'o';
            map[heroHealthBarRow + 1][heroHealthBarColumn + 2] = 'i';
            map[heroHealthBarRow + 1][heroHealthBarColumn + 3] = 'n';
            map[heroHealthBarRow + 1][heroHealthBarColumn + 4] = 's';
            map[heroHealthBarRow + 1][heroHealthBarColumn + 5] = ':';
            map[heroHealthBarRow + 1][heroHealthBarColumn + 6] = ' ';
            map[heroHealthBarRow + 1][heroHealthBarColumn + 7] = s[0];
            map[heroHealthBarRow + 1][heroHealthBarColumn + 8] = s[1];

            if (heroCoins > 99)
                map[heroHealthBarRow + 1][heroHealthBarColumn + 9] = s[2];
            if (heroCoins > 999)
                map[heroHealthBarRow + 1][heroHealthBarColumn + 10] = s[3];
            
            if (heroLifes == 3)
            {
                map[heroHealthBarRow + 1][heroHealthBarColumn + 15] = 3;
                map[heroHealthBarRow + 1][heroHealthBarColumn + 17] = 3;
                map[heroHealthBarRow + 1][heroHealthBarColumn + 19] = 3;
            }
            if (heroLifes == 2)
            {
                map[heroHealthBarRow + 1][heroHealthBarColumn + 15] = 3;
                map[heroHealthBarRow + 1][heroHealthBarColumn + 17] = 3;
                map[heroHealthBarRow + 1][heroHealthBarColumn + 19] = 32;
            }
            if (heroLifes == 1)
            {
                map[heroHealthBarRow + 1][heroHealthBarColumn + 15] = 3;
                map[heroHealthBarRow + 1][heroHealthBarColumn + 17] = 32;
                map[heroHealthBarRow + 1][heroHealthBarColumn + 19] = 32;
            }
            //map[heroHealthBarRow + 1][heroHealthBarColumn + 9] = s[2];
        }
    }

    void setHeroHealthBarRowTo(int _heroHealthBarRow) { this->heroHealthBarRow = _heroHealthBarRow; }
    void setHeroHealthBarColumnTo(int _heroHealthBarColumn) { this->heroHealthBarColumn = _heroHealthBarColumn; }

    inline int getHeroHealthBarRow() { return this->heroHealthBarRow; }
    inline int getHeroHealthBarColumn() { return this->heroHealthBarColumn; }

    void setRemainingHealTo(int _remainingHeal) { this->remainingHeal = _remainingHeal; }
    inline int getRemainingHeal() { return this->remainingHeal; }

    void setHeroLifesTo(int _heroLifes) { this->heroLifes = _heroLifes; }
    inline int getHeroLifes() { return this->heroLifes; }
};

HeroHealth heroHealth;

////////////////////////////////////////////////////////////////

class FrogEnemy
{
protected:
    int frogRow;
    int frogColumn;
    int frogHeal;
    int frogFlag;

    string frogEnemy =
        "   _\n"
        " .'_`--.___   __\n"
        "( 'o`   - .`.'_ )\n"
        " `-._      `_`./_\n"
        "   '/\\    ( .'/ )\n"
        "  ,__//`---'`-'_/\n"
        "   /-'        '/   \n";

public:

    void DrawFrogEnemy(int r, int c)
    {


        tempColumn = c;

        for (i = 0; this->frogEnemy[i] != '\0'; i++)
        {
            if (this->frogFlag == 1)
                if (this->frogEnemy[i] != '\n')
                    map[r][c++] = this->frogEnemy[i];

            if (this->frogEnemy[i] == '\n')
            {
                r++;
                c = tempColumn;
            }
        }

    }

    inline int getFrogRow() { return this->frogRow; }
    inline int getFrogColumn() { return this->frogColumn; }

    void setFrogRowTo(int _frogRow) { this->frogRow = _frogRow; }
    void setFrogColumnTo(int _frogColumn) { this->frogColumn = _frogColumn; }

    void setFrogFlagTo(int _frogFlag) { this->frogFlag = _frogFlag; }
};

FrogEnemy frogEnemy[1];

void setFrogEnemiesPositions()
{
    for (i = 0, tempRow = 25, tempColumn = 370; i < frogsNumber; tempRow += 2, tempColumn += 25, i++)
    {
        frogEnemy[i].setFrogRowTo(tempRow);
        frogEnemy[i].setFrogColumnTo(tempColumn);
        frogEnemy[i].setFrogFlagTo(1);
        //batEnemy[i].flagBatBullet = 1;
    }
}

void DrawFrogEnemies(int loop)
{
    int p;
    for (p = 0; p < loop; p++)
    {
        frogEnemy[p].DrawFrogEnemy(frogEnemy[p].getFrogRow(), frogEnemy[p].getFrogColumn());
        //frogEnemy[p].DrawFrogEnemy(frogEnemy[p].getBulletBatRow(), frogEnemy[p].getBulletBatColumn());
        //GravityToGround(batEnemy[p].getBulletBatRow(), batEnemy[p].getBulletBatColumn(), p);
    }

}

////////////////////////////////////////////////////////////////

class DogEnemy
{
protected:
    unsigned char dogEnemy[100] = { 32, 32, 45, 45, 32 ,32 ,32, 32 ,32 ,32, 45, 10,
                111, 39, 39, 41, 125, 45, 45, 45, 45, 47, 47, 10,
                32, 96, 95, 47, 32, 32, 32, 32 ,32, 32 ,41, 10,
                32, 40, 95, 40, 95, 47, 45, 40, 95, 47, 32, 0 };
    int dogRow;
    int dogColumn;
    int dogFlag;

public:


    void DrawDogEnemy(int r, int c)
    {
        tempColumn = c;

        for (i = 0; this->dogEnemy[i] != 0; i++)
        {
            if (this->dogFlag == 1)
                if (this->dogEnemy[i] != 10)
                    map[r][c++] = this->dogEnemy[i];

            if (this->dogEnemy[i] == 10)
            {
                r++;
                c = tempColumn;
            }
        }
    }

    void MoveDog() {


        if (dogColumn == 520 || dogColumn == 521 || dogColumn == 522)
            dogFlag = 2;

        if (dogColumn == 630 || dogColumn == 631 || dogColumn == 632)
        {
            dogFlag = 1;
        }
        if (dogFlag == 2)
        {
            dogColumn += 3;
        }
        if (dogFlag == 1)
        {
            dogColumn -= 3;
        }

    }


    inline int getDogRow() { return this->dogRow; }
    inline int getDogColumn() { return this->dogColumn; }

    void setDogRowTo(int _dogRow) { this->dogRow = _dogRow; }
    void setDogColumnTo(int _dogColumn) { this->dogColumn = _dogColumn; }

    inline int getDogFlag() { return this->dogFlag; }
    void setDogFlagTo(int _dogFlag) { this->dogFlag = _dogFlag; }

};

DogEnemy dogEnemy[7];
int dogsNumber = 7;

void setDogEnemiesPositions()
{

    for (i = 0, tempRow = 35, tempColumn = 550; i < dogsNumber; i++)
    {
        if (i % 2 == 0)
        {
            dogEnemy[i].setDogRowTo(tempRow);
            dogEnemy[i].setDogColumnTo(tempColumn);
            tempColumn += 13;
        }
        else
        {
            dogEnemy[i].setDogRowTo(tempRow);
            dogEnemy[i].setDogColumnTo(tempColumn);
            tempColumn += 15;
        }

        dogEnemy[i].setDogFlagTo(1);
    }
}

void DrawDogEnemies(int loop)
{

    for (int p = 0; p < loop; p++)
    {
        dogEnemy[p].DrawDogEnemy(dogEnemy[p].getDogRow(), dogEnemy[p].getDogColumn());

        //GravityToGround(batEnemy[p].getBulletBatRow(), dogEnemy[p].getBulletBatColumn(), p);
    }

}


class BatEnemy
{
protected:
    int batRow;
    int batColumn;
    int batHeal;
    int bulletBatRow;
    int bulletBatColumn;
    int flagBatBullet;
    int batFlag;

    char batBulletChar = 248;



    unsigned char batArt[1000] = { 32, 32, 40, 95, 32, 32, 32, 32, 46, 46, 32, 32, 32, 32, 95, 41, 10,
                                   32, 32, 47, 32, 96 ,39, 45, 45, 41, 32, 40, 45, 45 ,39, 96, 32, 92, 10,
                                   32, 47 ,32, 32, 95, 44, 45, 39, 92 ,95, 47, 39, 45, 44, 95, 32, 32, 92, 10,
                                   47, 46, 45, 39, 32, 32, 32, 32, 32, 39, 32, 32, 32, 32, 32, 39, 45, 46 ,92, 0 };

public:


    void DrawBatBullet(int r, int c)
    {
        if (this->flagBatBullet == 1)
            map[r][c] = batBulletChar;
    }

    void DrawBatEnemy(int r, int c)
    {
        tempColumn = c;

        for (i = 0; this->batArt[i] != 0; i++)
        {
            if (this->batFlag == 1)
                if (this->batArt[i] != 10)
                    map[r][c++] = this->batArt[i];

            if (this->batArt[i] == 10)
            {
                r++;
                c = tempColumn;
            }
        }
    }

    inline int getBatRow() { return this->batRow; }
    inline int getBatColumn() { return this->batColumn; }

    void setBatRowTo(int _batRow) { this->batRow = _batRow; }
    void setBatColumnTo(int _batColumn) { this->batColumn = _batColumn; }

    inline int getBatFlag() { return this->batFlag; }
    void setBatFlagTo(int _batFlag) { this->batFlag = _batFlag; }

    inline int getBatHeal() { return this->batHeal; }
    void setBatHealTo(int _batHeal) { this->batHeal = _batHeal; }

    inline int getBulletBatRow() { return this->bulletBatRow; }
    inline int getBulletBatColumn() { return this->bulletBatColumn; }
    inline int getBulletBatFlag() { return this->flagBatBullet; }

    void setBulletBatRowTo(int _bulletBatRow) { this->bulletBatRow = _bulletBatRow; }
    void setBulletBatColumnTo(int _bulletBatColumn) { this->bulletBatColumn = _bulletBatColumn; }
    void setBulletBatFlagTo(int _flagBatBullet) { this->flagBatBullet = _flagBatBullet; }

    inline char getBatBulletChar() { return this->batBulletChar; }
};

BatEnemy batEnemy[3];

///////////////////////////////////////////////////////////////
class Laser
{
protected:


    char laserChar = 196;

public:

    int laserSize;
    int laserRow;
    int flagLaser;
    int laserColumn;


    void DrawLaser()
    {
        if (this->flagLaser == 1)
        {
            c = this->laserColumn;
            for (r = this->laserRow; c < this->laserColumn + this->laserSize; )
            {
                map[r][c++] = this->laserChar;
            }
        }
    }

    void setLaserPositions(int _laserRow, int  _laserColumn)
    {
        this->laserRow = _laserRow + 5;


        this->laserColumn = _laserColumn + 11;
    }

    void setLaser()
    {

        this->laserSize = 20;
        this->flagLaser = 0;

    }


    void setFlagLaser(int _flagLaser) { this->flagLaser = _flagLaser; }
    inline int getFlaglaser() { return this->flagLaser; }


};

Laser laser;

void CheckLaserWithBat()
{
    for (i = 0; i < batsNumber; i++)
    {
        if (batEnemy[i].getBatRow() <= laser.laserRow &&
            batEnemy[i].getBatRow() + 3 >= laser.laserRow - 2 &&
            laser.laserColumn + laser.laserSize >= batEnemy[i].getBatColumn() &&
            laser.laserColumn + laser.laserSize <= batEnemy[i].getBatColumn() + 16)
        {
            batEnemy[i].setBatFlagTo(0);
            heroCoins += 5;
            PlaySound(TEXT("sounds\\1coin.wav"), NULL, SND_ASYNC);
            batEnemy[i].setBulletBatFlagTo(0);
        }
    }
}

void CheckLaserWithFrog()
{
    if (laser.flagLaser == 1)
    {
        for (i = 0; i < frogsNumber; i++)
        {
            if (frogEnemy[i].getFrogRow() - 1 <= laser.laserRow &&
                frogEnemy[i].getFrogRow() + 3 >= laser.laserRow &&
                laser.laserColumn + laser.laserSize >= frogEnemy[i].getFrogColumn() &&
                laser.laserColumn <= frogEnemy[i].getFrogColumn())
            {
                frogEnemy[i].setFrogFlagTo(0);
                frogEnemy[i].setFrogColumnTo(0);
                heroCoins += 5;
                PlaySound(TEXT("sounds\\1coin.wav"), NULL, SND_ASYNC);
                //batEnemy[i].setBulletBatFlagTo(0);
            }
        }
    }
}

void CheckLaserWithDogs()
{
    if (laser.flagLaser == 1)
    {
        for (i = 0; i < dogsNumber; i++)
        {
            if (dogEnemy[i].getDogRow() - 1 <= laser.laserRow &&
                dogEnemy[i].getDogRow() + 3 >= laser.laserRow &&
                laser.laserColumn + laser.laserSize >= dogEnemy[i].getDogColumn() &&
                laser.laserColumn <= dogEnemy[i].getDogColumn())
            {
                dogEnemy[i].setDogFlagTo(0);
                dogEnemy[i].setDogColumnTo
                (0);
                PlaySound(TEXT("sounds\\1coin.wav"), NULL, SND_ASYNC);
                heroCoins += 5;
                //batEnemy[i].setBulletBatFlagTo(0);
            }
        }
    }
}


void Shop(int i)
{
    if (flagNewHero == 0)
    {
        switch (i)
        {
        case 0:
            cout <<


                "\n                                                                             _________________________\n"
                "                                                                            |                         |\n"
                "                                                                            |         (_)             |\n"
                "                                                                            |             (_)         |\n"
                "                                                                            |         (_)             |\n"
                "                                                                            |_________________________|\n"
                "                                                                            |                         |\n"
                "                                                                            |        20$  Burst       |\n"
                "                                                                            |_________________________|\n";



            break;

        case 1:
            cout <<

                "                                                                             _________________________\n"
                "                                                                            |                         |\n"
                "                                                                            |                         |\n"
                "                                                                            |     (_) (_) (_) (_)     |\n"
                "                                                                            |                         |\n"
                "                                                                            |_________________________|\n"
                "                                                                            |                         |\n"
                "                                                                            |         40$  Auto       |\n"
                "                                                                            |_________________________|\n";




            break;

        case 2:
            cout <<

                "                                                                             _________________________\n"
                "                                                                            |                         |\n"
                "                                                                            |       ,d88b.d88b,       |\n"
                "                                                                            |       88888888888       |\n"
                "                                                                            |       `Y8888888Y'       |\n"
                "                                                                            |         `Y888Y'         |\n"
                "                                                                            |           `Y'           |\n"
                "                                                                            |_________________________|\n"
                "                                                                            |                         |\n"
                "                                                                            |     60$  First Aid      |\n"
                "                                                                            |_________________________|\n";
            break;

        default:
            break;
        }
    }
    else
    {
        switch (i)
        {
        case 0:
            cout <<


                "\n                                                                             _________________________\n"
                "                                                                            |                         |\n"
                "                                                                            |           .---.         |\n"
                "                                                                            |          | (O) |        |\n"
                "                                                                            |           '-.-'         |\n"
                "                                                                            |_________________________|\n"
                "                                                                            |                         |\n"
                "                                                                            |   20$  Mega Man Weapon  |\n"
                "                                                                            |_________________________|\n";



            break;

        case 1:
            cout <<

                "                                                                             _________________________\n"
                "                                                                            |                         |\n"
                "                                                                            |           Open          |\n"
                "                                                                            |           Door          |\n"
                "                                                                            |                         |\n"
                "                                                                            |_________________________|\n"
                "                                                                            |                         |\n"
                "                                                                            |            40$          |\n"
                "                                                                            |_________________________|\n";




            break;

        case 2:
            cout <<

                "                                                                             _________________________\n"
                "                                                                            |                         |\n"
                "                                                                            |       ,d88b.d88b,       |\n"
                "                                                                            |       88888888888       |\n"
                "                                                                            |       `Y8888888Y'       |\n"
                "                                                                            |         `Y888Y'         |\n"
                "                                                                            |           `Y'           |\n"
                "                                                                            |_________________________|\n"
                "                                                                            |                         |\n"
                "                                                                            |     60$  First Aid      |\n"
                "                                                                            |_________________________|\n";
            break;

        default:
            break;
        }

    }

}

int GetShop()
{
    //EricSpeech();

    while (true)
    {
        system("cls");

        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 6);
        cout << "\n\n"


            "                                                    .----------------.  .----------------.  .----------------.  .----------------.        \n"
            "                                                    | .--------------. || .--------------. || .--------------. || .--------------. |       \n"
            "                                                    | |    _______   | || |  ____  ____  | || |     ____     | || |   ______     | |       \n"
            "                                                    | |   /  ___  |  | || | |_ || _| |   | | |   .'    `.    | || |  |_   __ \\   | |         \n"
            "                                                    | |  |  (__ \\_|  | || |   | |__| |   | || |  /  .--.  \\  | || |    | |__) |  | |    \n"
            "                                                    | |   '.___`-.   | || |   |  __  |   | || |  | |    | |  | || |    |  ___/   | |       \n"
            "                                                    | |  |`\\____) |  | || |  _| |  | |_  | || |  \\  `- - '/  | || |   _| |_      | |  \n"
            "                                                    | |  |_______.'  | || | |____||____| | || |   `.____.'   | || |  |_____|     | |      \n"
            "                                                    | |              | || |              | || |              | || |              | |      \n"
            "                                                    | '--------------' || '--------------' || '--------------' || '--------------' |      \n"
            "                                                    '----------------'  '----------------'  '----------------'  '----------------'        \n";

        for (int i = 0; i < 3; i++)
        {
            if (i == shopPointer)
            {

                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 3);


                Shop(i);
            }
            else
            {
                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
                Shop(i);
            }
        }

        while (true)
        {
            if (GetAsyncKeyState(VK_UP))
            {
                shopPointer--;
                PlaySound(TEXT("sounds\\SwitchMenu.wav"), NULL, SND_ASYNC);

                if (shopPointer == -1)
                {
                    shopPointer = 2;
                }
                break;
            }
            else if (GetAsyncKeyState(VK_DOWN))
            {
                shopPointer++;
                PlaySound(TEXT("sounds\\SwitchMenu.wav"), NULL, SND_ASYNC);

                if (shopPointer == 3)
                {
                    shopPointer = 0;
                }
                break;
            }
            else if (GetAsyncKeyState(VK_RETURN))
            {


                switch (shopPointer)
                {
                case 0:
                    return 1;

                case 1:
                    return 2;

                case 2:
                    return 3;
                }
            }
        }
        Sleep(160);
    }
}


////////////////////////////////////////////////////////////////

void MarioRetirement()
{
    system("cls");
    cout << "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";
    string typing = "                                                                                 Mario, you've done it again!\n\n\n"
        "                                                                                 But now it's time to retire.\n\n\n"
        "                                                                    Make way for the next hero, MegaMan is ready for action! \n\n\n";


    PlaySound(TEXT("sounds\\retirement.wav"), NULL, SND_ASYNC);
    for (int i = 0; i < typing.length() - 1; i++)
    {
        cout << typing[i];

        if (typing[i] != ' ' && typing[i + 1] != ' ')
            Sleep(110);
    }
    PlaySound(TEXT("sounds\\15 - GutsQuake.wav"), NULL, SND_ASYNC);

}


class Hero
{
protected:
    unsigned char rightHero[96] =
    { 255,255,255,220,219,219,219,219,220,220,10,
     255,255,255,220,223,219,223,222,192,196,191,10,
     255,255,255,219,220,222,221,220,219,220,217,10,
     255,255,255,192,220,220,220,220,196,217,255,10,
     220,219,219,219,177,219,219,177,219,219,219,220,10
     ,177,177,219,220,177,177,177,177,220,219,177,177,10,
     255,255,177,177,177,223,177,177,177,10,
     220,219,219,219,255,255,255,219,219,219,220 };


    unsigned char leftHero[300] =

    { 255,255,220,220,219,219,219,219, 220,10,
        255,218, 196, 217, 221, 223, 219, 223, 220, 10,
        255,192, 220, 219, 220, 222, 221 ,220, 219, 10,
        255,32, 192, 196, 220, 220, 220, 220, 217,  10,
        220,219,219,219,177,219,219,177,219,219,219,220,10,
        177,177,219,220,177,177,177,177,220,219,177,177,10,
        32,32,177,177,177,223,177,177,177,10,
        220,219,219,219,32,32,32,219,219,219,220 };

    unsigned char megaMan[500] =
    { 32,32,32,32,32,32,32,32,32,220,220,219,223,223,220,10,
        32,32,32,32,32,32,220,219,219,219,219,219,220, 220,219, 220,10,
        32,32,32,32,32,219,32,219,223,32,32,220,220,223,219,32,219,10,
        32,32,32,32,32,220,219,219,32,32,32,223,223,32,223,32,219,10,
        32,32,220,219,223,32,32,223,219,32,223, 223,223,223,220,223,223,219,220,10,
        32,220,219,219,219,32,220,32,32,223,223,223,223,223,220,32,219,219,219,220,10,
        32,223,219,219,219,223,219,219,219,219,219,219,219,219,219,223,219,219,219,223,10,
        32,32,32,32,220,219,220,32,223,223,219,223,32,32,220,219,220,10,
        32,32,220,219,219,219,219,219,220,223,32,223,220,219,219,219,219,219,220
    };

    unsigned char megaManJump[500] =
    { 32,32,220,220,32,32,32,32,32,220,220,219,223,223,220,32,32,32,32,32,220,10,
        32,219,219,219,219,220,32,32,220,219,219,219,219,219,220,220,219,220,32,32,220,219,219,10,
        32,32, 223, 219,219,219,219,219,32, 219,223,32,32,220,220,223,219,32,219,223,219,219,219,10,
        32,32,32,32,223,219,223,32,219,219,32,32,32,223,223,32,223,32,219,32,220,223,10,
        32,32,32,32,32,32,223,220,32,223,219,32,220,219,219,219,220,223,220,223,223,10,
        32,32,32,32,32,32,32,32,219,32,32,32,32,32,32,32,32,219,220,220,10,
        32,32,32,32,32,32,32,32,219,32,32,223,223,219,219,220,220,220,219,219,219,219,10,
        32,32,32,32,32,32,32,32,219,219,219,219,219,220,32,32,32,223,219,219,219,219,10,
        32,32,32,32,32,32,32,32,32,223,219,219,219,223 };

    unsigned char megaManShoot[500] =
    { 32,32,32,32,32,32,32,32,32,32,32,32,220,220,219,223,223,220,10,
        32,32,32,32,32,220,220,220,223,219,219,219,219,219,219,220,220,219,219,10,
        32,32,220,219,219,32,32,219,32,219,223,32,32,220,220,223,219,32,219,220,220,220,220,10,
        220,219,219,219,219,219,32,32,219,219,32,32,32,223,223,32,223,32,219,223,223,219,219,223,223,223,219,223,220,10,
        219,219,219,219,219,32,219,219,32,32,223,219,32,223,223,223,223,220,223,32,32,32,219,219,219,219,219,219,219,223,10,
        32,223,223,219,220,32,219,219,220,220,32,223,223,223,223,219,223,223,223,223,223,32,223,223,223,223,10,
        32,220,219,219,219,219,219,219,219,219,223,223,223,220,223,10,
        219,219,219,219,219,219,32,223,223,219,220,32,32,32,219,220,10,
        32,32,32,32,32,32,32,32,32,219,219,219,219,219,219,219,219,219,0 };

    string carHero =
        "  ______\n"
        " /|_||_\\`.__\n"
        "(   _    _ _\\\n"
        " `-(_)--(_)-'\n";




    int heroRow;
    int heroColumn;
    

    
    int flagAutoBulletDraw = 0;
    int flagBrustBulletDraw = 0;
    int flagChangeBulletPos = 0;
    int jumpLimitCounter = 0;
    int sideJumpSize = 4;
    int walkingStep = 5;
    int bulletsArray[100];
    int flagCheckLadder = 0;
    int checkRightFlag = 0;
    int checkLeftFlag = 0;
    int checkUpFlag = 0;
    int checkDownFlag = 0;


    char heroSingleBullet = 248;

    void Reset()
    {
        this->heroRow = 10;
        this->heroColumn = 0;
        this->bulletRow = heroRow + 5;
        this->bulletColumn = heroColumn + 12;
        this->heroSingleBullet = 248;
        this->flagSingleBulletDraw = 0;
        this->flagBrustBulletDraw = 0;
        this->flagAutoBulletDraw = 0;
        this->flagChangeBulletPos = 0;
    }

    void UpdateBulletPosition()
    {
        if (this->flagSingleBulletDraw == 0 && flagHeroDirection == 1)
        {
            this->bulletRow = this->heroRow + 5;
            this->bulletColumn = this->heroColumn + 12;
        }

    }

    void fillBulletsArray()
    {
        for (i = 0; i < 100; i++)
            this->bulletsArray[i] = 0;
    }

    



public:
    int bulletRow = heroRow + 5;
    int bulletColumn = heroColumn + 12;
    int firingMode = 1;
    int ct = 0;
    int flagSingleBulletDraw = 0;

    int startBulletRow;
    int startBulletColumn;

    void setBulletsPositions()
    {
        bulletRow = this->heroRow + 5;
        bulletColumn = this->heroColumn + 12;

        bulletsArray[a] = this->heroRow + 5;
        bulletsArray[a + 1] = this->heroColumn + 12;
    }
    void DrawHero()
    {
        r = this->heroRow;
        c = this->heroColumn;


        if (c >= 980 && c <= 990 &&  r <= 12 && ct == 0)
        {
            flagNewHero = 1;
            MarioRetirement();
            ct++;
        }

        if (c < 980)
        {
            ct = 0;
            flagNewHero = 0;
        }

        if (flagNewHero == 0)
        {
            if (heroOrCar == 1)

            {
                if (flagHeroDirection == 1)
                    for (i = 0; this->rightHero[i] != '\0'; i++)
                    {
                        if (this->rightHero[i] != 10)
                            map[r][c++] = this->rightHero[i];

                        if (this->rightHero[i] == 10)
                        {
                            r++;
                            c = this->heroColumn;
                        }
                    }

                if (flagHeroDirection == 0)
                    for (i = 0; this->leftHero[i] != '\0'; i++)
                    {
                        if (this->leftHero[i] != 10)
                            map[r][c++] = this->leftHero[i];

                        if (this->leftHero[i] == 10)
                        {
                            r++;
                            c = this->heroColumn;
                        }
                    }
            }

            if (heroOrCar == 2)
            {
                for (i = 0; i < this->carHero.length(); i++)
                {
                    if (this->carHero[i] != '\n')
                        map[r + 3][c++] = this->carHero[i];

                    if (this->carHero[i] == '\n')
                    {
                        r++;
                        c = this->heroColumn;
                    }
                }
            }
        }
        else
        {

            if (flagMegaManUp == 1)
            {
                for (i = 0; this->megaManJump[i] != '\0'; i++)
                {
                    if (this->megaManJump[i] != 10)
                        map[r][c++] = this->megaManJump[i];

                    if (this->megaManJump[i] == 10)
                    {
                        r++;
                        c = this->heroColumn;
                    }
                }

            }
            else if (flagMegaManShoot == 1)
            {
                for (i = 0; this->megaManShoot[i] != '\0'; i++)
                {
                    if (this->megaManShoot[i] != 10)
                        map[r][c++] = this->megaManShoot[i];

                    if (this->megaManShoot[i] == 10)
                    {
                        r++;
                        c = this->heroColumn;
                    }
                }

            }
            else
            {
                for (i = 0; this->megaMan[i] != '\0'; i++)
                {
                    if (this->megaMan[i] != 10)
                        map[r][c++] = this->megaMan[i];

                    if (this->megaMan[i] == 10)
                    {
                        r++;
                        c = this->heroColumn;
                    }
                }
            }
        }

    }

    void BulletMove()
    {
        int stillHeal;
        int batHeal;

        
        if (flagNewHero == 0)
        {
            if (this->flagSingleBulletDraw == 1)
            {
                if (map[this->bulletRow][this->bulletColumn + 3] == 32)
                    this->bulletColumn += 3;
                else
                    this->flagSingleBulletDraw = 0;

                for (i = 0; i < batsNumber; i++)
                {
                    if (batEnemy[i].getBatFlag())
                    {
                        if (this->bulletRow >= batEnemy[i].getBatRow() && this->bulletRow <= batEnemy[i].getBatRow() + 4
                            && this->bulletColumn >= batEnemy[i].getBatColumn() - 1)
                        {
                            this->flagSingleBulletDraw = 0;
                            batEnemy[i].setBatHealTo(batEnemy[i].getBatHeal() - 1);

                            if (!batEnemy[i].getBatHeal())
                            {
                                batEnemy[i].setBatFlagTo(0);

                                batEnemy[i].setBulletBatFlagTo(0);
                                batEnemy[i].setBatColumnTo(0);
                            }
                        }
                    }
                }

                for (i = 0; i < frogsNumber; i++)
                    if (this->bulletRow >= frogEnemy[i].getFrogRow() && this->bulletRow <= frogEnemy[i].getFrogRow() + 7
                        && this->bulletColumn >= frogEnemy[i].getFrogColumn() && this->bulletColumn <= frogEnemy[i].getFrogColumn() + 11)
                        this->flagSingleBulletDraw = 2;
            }


            if (this->flagSingleBulletDraw == 2)
            {
                stillHeal = heroHealth.getRemainingHeal();

                if (this->heroColumn + 11 < this->bulletColumn)
                    this->bulletColumn -= 3;

                else
                    this->flagSingleBulletDraw = 0;


                if (this->flagSingleBulletDraw)
                    if (this->bulletColumn <= this->heroColumn + 10)
                    {
                        stillHeal -= bulletDamage;
                        heroHealth.setRemainingHealTo(stillHeal);
                    }
            }

            if (this->flagBrustBulletDraw == 1)
            {
                if (map[this->bulletRow][this->bulletColumn + 3] == 32)
                    this->bulletColumn += 3;
                else
                    this->flagBrustBulletDraw = 0;

                for (i = 0; i < batsNumber; i++)
                {
                    if (batEnemy[i].getBatFlag())
                    {
                        if (this->bulletRow >= batEnemy[i].getBatRow() && this->bulletRow <= batEnemy[i].getBatRow() + 4
                            && this->bulletColumn >= batEnemy[i].getBatColumn() - 1)
                        {
                            this->flagBrustBulletDraw = 0;
                            batEnemy[i].setBatHealTo(batEnemy[i].getBatHeal() - 2);

                            if (batEnemy[i].getBatHeal() <= 0)
                            {
                                batEnemy[i].setBatFlagTo(0);
                                batEnemy[i].setBulletBatFlagTo(0);
                                batEnemy[i].setBatColumnTo(0);
                            }
                        }
                    }
                }

                for (i = 0; i < frogsNumber; i++)
                {
                    if (this->bulletRow + 1 >= frogEnemy[i].getFrogRow() && this->bulletRow - 1 <= frogEnemy[i].getFrogRow() + 7
                        && this->bulletColumn >= frogEnemy[i].getFrogColumn() && this->bulletColumn <= frogEnemy[i].getFrogColumn() + 11)
                    {
                        this->flagBrustBulletDraw = 2;
                    }
                }
            }

            if (this->flagBrustBulletDraw == 2)
            {
                stillHeal = heroHealth.getRemainingHeal();

                if (this->heroColumn + 11 < this->bulletColumn)
                    this->bulletColumn -= 3;

                else
                    this->flagBrustBulletDraw = 0;

                if (this->flagBrustBulletDraw)
                    if (this->bulletColumn <= this->heroColumn + 10)
                    {
                        stillHeal -= bulletDamage * 3;
                        heroHealth.setRemainingHealTo(stillHeal);
                    }
            }

            if (this->flagAutoBulletDraw == 1 && this->bulletsArray[i + 2] == 1)
            {
                if (map[this->bulletsArray[i]][this->bulletsArray[i + 1] + 3] == 32)
                    this->bulletsArray[i + 1] += 3;

                else if (map[this->bulletsArray[i]][this->bulletsArray[i + 1]] == this->heroSingleBullet)
                    this->bulletsArray[i + 1] += 3;

                else
                    this->bulletsArray[i + 2] = 0;

                for (k = 0; k < batsNumber; k++)
                {
                    if (batEnemy[k].getBatFlag())
                    {
                        if (this->bulletsArray[i] >= batEnemy[k].getBatRow() && this->bulletsArray[i] <= batEnemy[k].getBatRow() + 4
                            && this->bulletsArray[i + 1] >= batEnemy[k].getBatColumn() - 1)
                        {
                            //this->flagAutoBulletDraw = 0;
                            this->bulletsArray[i + 2] = 0;

                            batEnemy[k].setBatHealTo(batEnemy[k].getBatHeal() - 1);

                            if (batEnemy[k].getBatHeal() <= 0)
                            {
                                batEnemy[k].setBatFlagTo(0);
                                batEnemy[k].setBulletBatFlagTo(0);
                            }
                        }
                    }
                }


                for (k = 0; k < frogsNumber; k++)
                {
                    if (this->bulletsArray[i] >= frogEnemy[k].getFrogRow() && this->bulletsArray[i] <= frogEnemy[k].getFrogRow() + 7
                        && this->bulletsArray[i + 1] >= frogEnemy[k].getFrogColumn())
                    {
                        this->flagAutoBulletDraw = 2;
                        this->bulletsArray[i + 2] = 2;
                    }
                }
            }

            if (this->flagAutoBulletDraw == 2 && this->bulletsArray[i + 2] == 2)
            {
                if (this->heroColumn + 11 < this->bulletsArray[i + 1] - 3)
                    this->bulletsArray[i + 1] -= 3;


                else
                {
                    this->bulletsArray[i + 2] = 0;
                    this->flagAutoBulletDraw = 0;
                }
            }
        }
        else
        {
            if (flagSingleBulletDraw == 1)

            {
                if (map[this->bulletRow][this->bulletColumn + 3] == 32)
                    this->bulletColumn += 3;
                else
                    this->flagSingleBulletDraw = 0;
            }
        }


    }

    void BulletMegaManMove()
    {
        int stillHeal;
    }

    void BulletDraw()
    {
        if (flagNewHero == 0)
        {
            if (this->flagSingleBulletDraw == 1 || this->flagSingleBulletDraw == 2)
            {
                map[this->bulletRow][this->bulletColumn] = heroSingleBullet;
                this->BulletMove();
            }



            if (this->flagBrustBulletDraw == 1)
            {

                map[this->bulletRow - 1][this->bulletColumn + 1] = this->heroSingleBullet;
                map[this->bulletRow][this->bulletColumn] = this->heroSingleBullet;
                map[this->bulletRow + 1][this->bulletColumn + 1] = this->heroSingleBullet;
                this->BulletMove();
            }

            // Mirroring the bullets
            if (this->flagBrustBulletDraw == 2)
            {

                map[this->bulletRow - 1][this->bulletColumn - 1] = this->heroSingleBullet;
                map[this->bulletRow][this->bulletColumn] = this->heroSingleBullet;
                map[this->bulletRow + 1][this->bulletColumn - 1] = this->heroSingleBullet;
                this->BulletMove();
            }

            if (this->flagAutoBulletDraw == 1 || this->flagAutoBulletDraw == 2)
            {

                for (i = 0; i < 100 - 4; i += 3)
                {
                    if (this->bulletsArray[i + 2] == 1)
                    {
                        map[this->bulletsArray[i]][this->bulletsArray[i + 1]] = this->heroSingleBullet;
                        this->BulletMove();
                    }

                    if (this->bulletsArray[i + 2] == 2)
                    {
                        map[this->bulletsArray[i]][this->bulletsArray[i + 1]] = this->heroSingleBullet;
                        this->BulletMove();
                    }
                }

            }
        }
        else
        {
            if (this->flagSingleBulletDraw == 1)
            {
                map[this->bulletRow][this->bulletColumn] = heroSingleBullet;
                this->BulletMove();
            }
        }
    }

    int HeroIsOnElevator(int r, int c)
    {
        if (this->heroRow + 8 == r - 1 && this->heroColumn + 11 >= c && this->heroColumn <= c + 2)
            return 1;
        else
            return 0;
    }


    void CheckLadderPosition()
    {

        if (this->heroColumn + 11 >= art.getLadderColumn() - 3 && this->heroColumn <= art.getLadderColumn() + 18)
            this->flagCheckLadder = 1;

        else if (this->heroColumn <= art.getLadderColumn() + 18 && this->heroColumn >= art.getLadderColumn() + 15)
            this->flagCheckLadder = 1;

        else    if (this->heroColumn > 703)
            this->flagCheckLadder = 1;

        else if (this->heroColumn <= 703 + 15 && this->heroColumn >= 703 + 12)
            this->flagCheckLadder = 1;



        else if (this->heroColumn + 11 >= 983 - 5 && this->heroColumn <= 1000 + 18)
            this->flagCheckLadder = 1;

        else
            this->flagCheckLadder = 0;
    }


    void CheckLadderUp()
    {
        if (this->flagCheckLadder == 1 && this->heroRow - 4 > art.getLadderRow() - 4)
        {
            this->checkUpFlag = 1;
        }
        else if (this->flagCheckLadder == 1 && this->heroRow - 4 > 23 - 4)
        {
            this->checkUpFlag = 1;
        }
        else if (this->flagCheckLadder == 1 && this->heroRow - 4 > 34 - 4)
        {
            this->checkUpFlag = 1;
        }

    }

    void CheckLadderDown()
    {
        if (this->flagCheckLadder == 1 && this->heroRow + 9 < art.getLadderRow() + 19)
        {
            this->checkDownFlag = 1;
        }
        else if (this->flagCheckLadder == 1 && this->heroRow + 11 < 23 + 10)
        {
            this->checkDownFlag = 1;
        }
        else if (this->flagCheckLadder == 1 && this->heroRow + 11 < 34 + 10)
        {
            this->checkDownFlag = 1;
        }
        else
            this->checkDownFlag = 0;
    }

    void CheckUp()
    {
        checkUpFlag = 1;
        for (k = this->heroColumn; k < this->heroColumn + 12; k++)
        {
            for (i = 1; i <= 4; i++)
            {
                if (map[this->heroRow - i][k] != ' ' && map[this->heroRow - i][k] != '$')
                {
                    this->checkUpFlag = 0;
                    break;
                }

            }
        }

    }

    void HeroActions()
    {
        //cout << this->flagBrustBulletDraw << endl;
        if (flagNewHero == 0)
        {
            if (GetAsyncKeyState(VK_LEFT))
            {
                flagHeroDirection = 0;
                CheckLadderPosition();
                checkLeftFlag = 1;
                for (k = this->heroRow; k < this->heroRow + 8; k++)
                {
                    for (i = 1; i <= this->walkingStep; i++)
                    {
                        if (map[k][this->heroColumn - i] != ' ' && map[k][this->heroColumn - i] != '$')
                        {
                            checkLeftFlag = 0;
                            break;
                        }

                    }

                }
                if (this->checkLeftFlag == 1 || this->flagCheckLadder == 1)
                {
                    this->heroColumn -= this->walkingStep;

                    //this->UpdateBulletPosition();
                }

                this->UpdateBulletPosition();
            }

            if (GetAsyncKeyState(VK_RIGHT))
            {
                CheckLadderPosition();
                this->checkRightFlag = 1;
                flagHeroDirection = 1;

                for (k = this->heroRow; k < this->heroRow + 8; k++)
                {
                    for (i = 1; i <= this->walkingStep; i++)
                    {
                        if (map[k][heroColumn + 11 + i] != ' ' && map[k][heroColumn + 11 + i] != '$')
                        {
                            checkRightFlag = 0;
                            break;
                        }

                    }

                }
                if (this->checkRightFlag == 1 || this->flagCheckLadder == 1 || heroOrCar == 2)
                {
                    this->heroColumn += this->walkingStep;
                    //this->UpdateBulletPosition();
                }
                this->UpdateBulletPosition();
            }

            if (GetAsyncKeyState(VK_UP))
            {
                CheckUp();
                CheckLadderUp();
                if (this->checkUpFlag == 1)
                {
                    this->jumpLimitCounter++;

                    if (this->jumpLimitCounter <= 2)
                    {
                        PlaySound(TEXT("sounds\\Jump.wav"), NULL, SND_ASYNC);
                        this->heroRow -= 6;
                        this->DrawHero();
                        art.DrawSky();
                        art.DrawGround();

                        art.Drawladder();
                        ClearMap();
                        ClearMap();
                        this->UpdateBulletPosition();
                    }
                }
            }


            if (GetAsyncKeyState(VK_DOWN))
            {
                CheckUp();
                CheckLadderDown();
                if (checkDownFlag == 1)
                {
                    this->heroRow++;
                    this->UpdateBulletPosition();
                }
            }

            // Key F
            if (GetAsyncKeyState(0x46))
            {
                this->setBulletsPositions();

                if (firingMode == 1)
                {
                    PlaySound(TEXT("sounds\\bumb.wav"), NULL, SND_ASYNC);
                    this->flagBrustBulletDraw = 0;
                    this->flagAutoBulletDraw = 0;
                    this->flagSingleBulletDraw = 1;

                    this->startBulletColumn = this->bulletColumn;
                }

                if (firingMode == 2)
                {
                    PlaySound(TEXT("sounds\\BrustMode.wav"), NULL, SND_ASYNC);
                    this->flagSingleBulletDraw = 0;
                    this->flagAutoBulletDraw = 0;
                    this->flagBrustBulletDraw = 1;

                    //this->startBulletColumn = this->bulletColumn;
                }

                if (firingMode == 3)
                {
                    PlaySound(TEXT("sounds\\bumb.wav"), NULL, SND_ASYNC);
                    this->flagSingleBulletDraw = 0;
                    this->flagBrustBulletDraw = 0;
                    this->flagAutoBulletDraw = 1;

                    cthbh++;

                    if (cthbh > 1)
                    {
                        if (a >= 96)
                            a = 0;
                        a += 3;
                        this->bulletsArray[a + 2] = 1;
                    }
                    else
                    {
                        this->fillBulletsArray();
                        this->setBulletsPositions();

                        // flag auto
                        this->bulletsArray[a + 2] = 1;
                    }
                }
            }

            // Key O
            if (GetAsyncKeyState(0x4F))
            {
                a = 1;
                //DrawLootCrates();

            }

            // Key C
            if (GetAsyncKeyState(0x43) && this->heroColumn >= 300 && this->heroColumn <= 500)
            {
                switch (heroOrCar)
                {
                case 1:
                    heroOrCar = 2;
                    walkingStep = 10;
                    PlaySound(TEXT("sounds\\carStart.wav"), NULL, SND_ASYNC);
                    break;

                case 2:
                    heroOrCar = 1;
                    walkingStep = 5;
                    break;
                default:
                    break;
                }
            }

            if (GetAsyncKeyState(0x4E) && this->heroColumn >= 700 && this->heroColumn <= 980)
            {
                switch (heroOrCar)
                {
                case 1:
                    heroOrCar = 2;
                    walkingStep = 30;
                    PlaySound(TEXT("sounds\\carStart.wav"), NULL, SND_ASYNC);
                    break;

                case 2:
                    heroOrCar = 1;
                    walkingStep = 5;
                    break;
                default:
                    break;
                }
            }



            // Key S
            if (GetAsyncKeyState(0x53))
            {
                switch (GetShop())
                {

                case 1:
                    if (modesNumber == 1 && heroCoins >= 20)
                    {
                        modesNumber++;
                        heroCoins -= 20;
                        PlaySound(TEXT("sounds\\cash.wav"), NULL, SND_ASYNC);
                    }
                    else
                        PlaySound(TEXT("sounds\\error.wav"), NULL, SND_ASYNC);
                    break;

                case 2:
                    if (modesNumber == 2 && heroCoins >= 40)
                    {
                        modesNumber++;
                        heroCoins -= 40;
                        PlaySound(TEXT("sounds\\cash.wav"), NULL, SND_ASYNC);
                    }
                    else
                        PlaySound(TEXT("sounds\\error.wav"), NULL, SND_ASYNC);
                    break;

                case 3:
                    if (heroCoins >= 60 && heroHealth.getRemainingHeal() < 20)
                    {
                        heroCoins -= 60;
                        heroHealth.setRemainingHealTo(20);
                        PlaySound(TEXT("sounds\\cash.wav"), NULL, SND_ASYNC);
                    }
                    else
                        PlaySound(TEXT("sounds\\error.wav"), NULL, SND_ASYNC);
                    break;

                }
            }

            if (GetAsyncKeyState(0x5A))
                heroCoins += 50;

            // Key L
            if (flagLaser == 1)
                if (GetAsyncKeyState(0x4C))
                {
                    laser.flagLaser = 1;
                    PlaySound(TEXT("sounds\\laser.wav"), NULL, SND_ASYNC);
                }
                else
                    laser.flagLaser = 0;

            for (i = 0; i < singleCoinI; i++)
                if (this->heroColumn + 11 >= singleCoin[i].coinColumn && this->heroColumn <= singleCoin[i].coinColumn && singleCoin[i].coinRow >= this->heroRow && singleCoin[i].coinRow <= this->heroRow + 11)
                {

                    if (singleCoin[i].flagCoin == 1)
                    {
                        PlaySound(TEXT("sounds\\1coin.wav"), NULL, SND_ASYNC);
                        heroCoins += 5;
                        //cout << heroCoins << endl;
                    }
                    singleCoin[i].flagCoin = 0;

                }

        }
        else
        {
            this->walkingStep = 8;
            if (GetAsyncKeyState(VK_LEFT))
            {
                flagMegaManUp = 0;
                flagHeroDirection = 0;
                checkLeftFlag = 1;
                for (k = this->heroRow; k < this->heroRow + 8; k++)
                {
                    for (i = 1; i <= this->walkingStep; i++)
                    {
                        if (map[k][this->heroColumn - i] != ' ')
                        {
                            checkLeftFlag = 0;
                            break;
                        }

                    }

                }
                if (this->checkLeftFlag == 1)
                {
                    this->heroColumn -= this->walkingStep;

                    //this->UpdateBulletPosition();
                }

                this->UpdateBulletPosition();
            }

            if (GetAsyncKeyState(VK_RIGHT))
            {
                flagMegaManUp = 0;

                this->checkRightFlag = 1;
                flagHeroDirection = 1;

                for (k = this->heroRow; k < this->heroRow + 8; k++)
                {
                    for (i = 1; i <= this->walkingStep; i++)
                    {
                        if (map[k][heroColumn + 27] != ' ')
                        {
                            checkRightFlag = 0;
                            break;
                        }

                    }

                }
                if (this->checkRightFlag == 1)
                {
                    this->heroColumn += this->walkingStep;
                    //this->UpdateBulletPosition();
                }
                this->UpdateBulletPosition();
            }

            if (GetAsyncKeyState(VK_UP))
            {
                flagMegaManUp = 1;
                CheckUp();
                CheckLadderUp();
                if (this->checkUpFlag == 1)
                {
                    this->jumpLimitCounter++;

                    if (this->jumpLimitCounter <= 2)
                    {
                        PlaySound(TEXT("sounds\\Jump.wav"), NULL, SND_ASYNC);
                        this->heroRow -= 8;
                        this->DrawHero();
                        art.DrawSky();
                        art.DrawGround();

                        art.Drawladder();
                        ClearMap();
                        ClearMap();
                        this->UpdateBulletPosition();
                    }
                }
            }

            
            // Key S
            if (GetAsyncKeyState(0x53))
            {
                switch (GetShop())
                {

                case 1:
                    if (megaFireMode == 1 && heroCoins >= 20)
                    {
                        megaModesNumber++;
                        heroCoins -= 20;
                        PlaySound(TEXT("sounds\\cash.wav"), NULL, SND_ASYNC);
                    }
                    else
                        PlaySound(TEXT("sounds\\error.wav"), NULL, SND_ASYNC);
                    break;

                case 2:
                    if (heroCoins >= 40 && flagCloseDoor == 1)
                    {
                        //modesNumber++;
                        heroCoins -= 40;
                        flagDoorShop = 1;
                        flagCloseDoor = 0;
                        PlaySound(TEXT("sounds\\closeDoor.wav"), NULL, SND_ASYNC);
                    }
                    else
                        PlaySound(TEXT("sounds\\error.wav"), NULL, SND_ASYNC);
                    break;

                case 3:
                    if (heroCoins >= 60 && heroHealth.getRemainingHeal() < 20)
                    {
                        heroCoins -= 60;
                        heroHealth.setRemainingHealTo(20);
                        PlaySound(TEXT("sounds\\cash.wav"), NULL, SND_ASYNC);
                    }
                    else
                        PlaySound(TEXT("sounds\\error.wav"), NULL, SND_ASYNC);
                    break;

                }
            }

            if (GetAsyncKeyState(0x5A))
                heroCoins += 30;

            // Key L
            if (flagLaser == 1)
                if (GetAsyncKeyState(0x4C))
                {
                    laser.flagLaser = 1;
                    PlaySound(TEXT("sounds\\laser.wav"), NULL, SND_ASYNC);
                }
                else
                    laser.flagLaser = 0;

            for (i = 0; i < singleCoinI; i++)
                if (this->heroColumn + 11 >= singleCoin[i].coinColumn && this->heroColumn <= singleCoin[i].coinColumn && singleCoin[i].coinRow >= this->heroRow && singleCoin[i].coinRow <= this->heroRow + 11)
                {

                    if (singleCoin[i].flagCoin == 1)
                    {
                        PlaySound(TEXT("sounds\\1coin.wav"), NULL, SND_ASYNC);
                        heroCoins+=5;
                        //cout << heroCoins << endl;
                    }
                    singleCoin[i].flagCoin = 0;

                }
        }
    }

    void moveElevator(int& r, int& c, int whoAreYou)
    {

        if (whoAreYou == 1)
        {
            if (this->HeroIsOnElevator(r, c))
            {
                if (flagElevator == 0)
                    if (r >= 26)
                    {
                        this->heroRow -= 2;
                        r -= 2;

                    }
                    else
                        flagElevator = 1;

                if (flagElevator == 1)
                    if (r <= 42)
                    {
                        r += 4;
                        this->heroRow += 2;
                    }
                    else
                        flagElevator = 0;

            }

        }
        if (whoAreYou == 2)
        {
            if (this->HeroIsOnElevator(r, c))
            {
                if (r >= 22)
                {
                    this->heroRow -= 2;
                    r -= 2;
                }
                else
                {
                    this->heroRow = 34;
                    this->heroColumn += 56;
                    PlaySound(TEXT("sounds\\portal.wav"), NULL, SND_ASYNC);
                }
            }
        }


        if (whoAreYou == 3)
        {


            if (c == 1280)
            {

                flagElevator = 1;

            }


            if (flagElevator == 1)
                if (this->HeroIsOnElevator(r, c))
                {
                    c -= 4;
                    this->heroColumn -= 4;
                }
                else
                    c -= 4;


            if (c == 1240)
            {

                flagElevator = 0;

            }


            if (flagElevator == 0)
                if (this->HeroIsOnElevator(r, c))
                {
                    c += 4;
                    this->heroColumn += 4;
                }
                else
                    c += 4;


        }

    }

    inline int getHeroRow() { return this->heroRow; }
    inline int getHeroColumn() { return this->heroColumn; }
    inline int getJumpLimitCounter() { return this->jumpLimitCounter; }

    void setHeroRowTo(int _heroRow) { this->heroRow = _heroRow; }
    void setHeroColumnTo(int _heroColumn) { this->heroColumn = _heroColumn; }
    void setJumpLimitCounterTo(int _jumpLimitCounter) { this->jumpLimitCounter = _jumpLimitCounter; }
};

Hero hero;

///////////////////////////////////////////////////////////////

class Hurt
{
public:
    int hurtRow;
    int hurtColumn;

    unsigned hurtArt[300] =
    { 177,177,177,177,177,177,177,177,33,177,177,177,177,177,177,177,177,33,177,177,177,177,177,177,177,177,33,
     178,178,178,178,178,178,178,178,33,178,178,178,178,178,178,178,178,33,178,178,178,178,178,178,178,178,33,
     219,219,219,219,219,219,219,219,33,219,219,219,219,219,219,219,219,33,
     86,86,86,86,86,86,86,86,0 };


    unsigned hurtArtOne[300] = { 86,86,86,86,86,86,86,86,0 };
    unsigned hurtArtTwo[300] = { 219,219,219,219,219,219,219,219,33,86,86,86,86,86,86,86,86,0 };
    unsigned hurtArtThree[300] = { 219,219,219,219,219,219,219,219,33,219,219,219,219,219,219,219,219,33,86,86,86,86,86,86,86,86,0 };
    unsigned hurtArtFour[300] = { 178,178,178,178,178,178,178,178,33,219,219,219,219,219,219,219,219,33,219,219,219,219,219,219,219,219,33,86,86,86,86,86,86,86,86 ,0 };
    unsigned hurtArtFive[300] = { 178,178,178,178,178,178,178,178,33,178,178,178,178,178,178,178,178,33,219,219,219,219,219,219,219,219,33,219,219,219,219,219,219,219,219,33,86,86,86,86,86,86,86,86,0 };
    unsigned hurtArtSix[300] = { 177,177,177,177,177,177,177,177,33,178,178,178,178,178,178,178,178,33,178,178,178,178,178,178,178,178,33,219,219,219,219,219,219,219,219,33,219,219,219,219,219,219,219,219,33,86,86,86,86,86,86,86,86,0 };
    unsigned hurtArtSeven[300] = { 177,177,177,177,177,177,177,177,33,177,177,177,177,177,177,177,177,33,178,178,178,178,178,178,178,178,33,178,178,178,178,178,178,178,178,33,219,219,219,219,219,219,219,219,33,
        219,219,219,219,219,219,219,219,33,86,86,86,86,86,86,86,86 ,0 };
    unsigned hurtArtEight[300] = { 177,177,177,177,177,177,177,177,33,177,177,177,177,177,177,177,177,33,177,177,177,177,177,177,177,177,33,178,178,178,178,178,178,178,178,33,178,178,178,178,178,178,178,178,33,
            219,219,219,219,219,219,219,219,33,219,219,219,219,219,219,219,219,33,86,86,86,86,86,86,86,86,0 };


    void DrawHurt(int size)
    {
        r = this->hurtRow;
        c = this->hurtColumn;



        switch (size)
        {
        case 1:
            for (i = 0; this->hurtArtOne[i] != 0; i++)
            {
                if (this->hurtArtOne[i] != 33)
                    map[r][c++] = this->hurtArtOne[i];

                if (this->hurtArtOne[i] == 33)
                {
                    r++;
                    c = this->hurtColumn;
                }
            }
            break;

        case 2:
            for (i = 0; this->hurtArtTwo[i] != 0; i++)
            {
                if (this->hurtArtTwo[i] != 33)
                    map[r][c++] = this->hurtArtTwo[i];

                if (this->hurtArtTwo[i] == 33)
                {
                    r++;
                    c = this->hurtColumn;
                }
            }
            break;

        case 3:
            for (i = 0; this->hurtArtThree[i] != 0; i++)
            {
                if (this->hurtArtThree[i] != 33)
                    map[r][c++] = this->hurtArtThree[i];

                if (this->hurtArtThree[i] == 33)
                {
                    r++;
                    c = this->hurtColumn;
                }
            }
            break;

        case 4:
            for (i = 0; this->hurtArtFour[i] != 0; i++)
            {
                if (this->hurtArtFour[i] != 33)
                    map[r][c++] = this->hurtArtFour[i];

                if (this->hurtArtFour[i] == 33)
                {
                    r++;
                    c = this->hurtColumn;
                }
            }
            break;

        case 5:
            for (i = 0; this->hurtArtFive[i] != 0; i++)
            {
                if (this->hurtArtFive[i] != 33)
                    map[r][c++] = this->hurtArtFive[i];

                if (this->hurtArtFive[i] == 33)
                {
                    r++;
                    c = this->hurtColumn;
                }
            }
            break;

        case 6:
            for (i = 0; this->hurtArtSix[i] != 0; i++)
            {
                if (this->hurtArtSix[i] != 33)
                    map[r][c++] = this->hurtArtSix[i];

                if (this->hurtArtSix[i] == 33)
                {
                    r++;
                    c = this->hurtColumn;
                }
            }
            break;

        case 7:
            for (i = 0; this->hurtArtSeven[i] != 0; i++)
            {
                if (this->hurtArtSeven[i] != 33)
                    map[r][c++] = this->hurtArtSeven[i];

                if (this->hurtArtSeven[i] == 33)
                {
                    r++;
                    c = this->hurtColumn;
                }
            }
            break;

        case 8:
            for (i = 0; this->hurtArtEight[i] != 0; i++)
            {
                if (this->hurtArtEight[i] != 33)
                    map[r][c++] = this->hurtArtEight[i];

                if (this->hurtArtEight[i] == 33)
                {
                    r++;
                    c = this->hurtColumn;
                }
            }
            break;

        default:
            break;
        }
    }
};

Hurt hurts[4];
int hurtsNumber = 4;

void setHurtPositions()
{
    for (i = 0, c = 780, r = 6; i < hurtsNumber; i++, c += 60)
    {
        hurts[i].hurtColumn = c;
        hurts[i].hurtRow = r;
    }
}

void CheckHurtsDamage()
{
    for (i = 0; i < hurtsNumber; i++)
        if (hurts[i].hurtRow + 6 == hero.getHeroRow())
        {
            if(map[hurts[i].hurtRow + 5][hero.getHeroColumn()] == 86 || map[hurts[i].hurtRow + 5][hero.getHeroColumn() + 2] == 86 ||
                map[hurts[i].hurtRow + 5][hero.getHeroColumn() + 4] == 86 || map[hurts[i].hurtRow + 5][hero.getHeroColumn() + 6] == 86 ||
                map[hurts[i].hurtRow + 5][hero.getHeroColumn() + 7] == 86 || map[hurts[i].hurtRow + 5][hero.getHeroColumn() + 8] == 86 ||
                map[hurts[i].hurtRow + 5][hero.getHeroColumn() + 9] == 86 || map[hurts[i].hurtRow + 5][hero.getHeroColumn() + 10] == 86 )
            heroHealth.setRemainingHealTo(0);
        }
}


void DrawHurts(int& flag1, int& flag2, int& flag3, int& flag4, int& ct1, int& ct2, int& ct3, int& ct4)
{
    if (flag1 == 1) ct1++;
    else ct1--;

    if (flag2 == 1) ct2++;
    else ct2--;

    if (flag3 == 1) ct3++;
    else ct3--;

    if (flag4 == 1) ct4++;
    else ct4--;

    if (ct1 == 8) flag1 = 0;
    if (ct1 == 0) flag1 = 1;

    if (ct2 == 8) flag2 = 0;
    if (ct2 == 0) flag2 = 1;

    if (ct3 == 8) flag3 = 0;
    if (ct3 == 0) flag3 = 1;

    if (ct4 == 8) flag4 = 0;
    if (ct4 == 0) flag4 = 1;



    hurts[0].DrawHurt(ct1);
    hurts[1].DrawHurt(ct2);
    hurts[2].DrawHurt(ct3);
    hurts[3].DrawHurt(ct4);

}


class MegaManBullet
{
public:
    int megaManBulletRow;
    int megaManBulletColumn;
    int flagDrawMegaManBullet;

    string megaManBullet =

        " .---.  \n"
        "| (O) | \n"
        " '-.-'  \n";



    void DrawMegaManBullet()
    {
        r = this->megaManBulletRow;
        c = this->megaManBulletColumn;
        //cout << " " << r << endl << c << endl;

        for (i = 0; i < this->megaManBullet.length(); i++)
        {
            if (this->megaManBullet[i] != '\n')
                map[r][c++] = this->megaManBullet[i];

            if (this->megaManBullet[i] == '\n')
            {
                r++;
                c = this->megaManBulletColumn;
            }
        }
    }
};

MegaManBullet megaBullets[1];
int megaManBulletsNumber = 1;

void UpdateMegaManBullets(int pos)
{
    megaBullets[pos].megaManBulletRow = hero.getHeroRow() + 3;
    megaBullets[pos].megaManBulletColumn = hero.getHeroColumn() + 30;
}

void SetMegaManBullets()
{
    for (i = 0; i < megaManBulletsNumber; i++)
    {
        megaBullets[i].megaManBulletRow = 0;
        megaBullets[i].megaManBulletColumn = 0;
        megaBullets[i].flagDrawMegaManBullet = 0;
    }
}

void DrawMegaManBullets()
{
    for (i = 0; i < megaManBulletsNumber; i++)
    {
        if (megaBullets[i].flagDrawMegaManBullet == 1)
        {

            megaBullets[i].DrawMegaManBullet();
        }
        else break;
    }
}

void MoveMegaManBullets()
{
    for (i = 0; i < megaManBulletsNumber; i++)
    {
        if (megaBullets[i].flagDrawMegaManBullet == 1)
            megaBullets[i].megaManBulletColumn += 8;

        if (megaBullets[i].megaManBulletColumn)
        {

        }
    }
}


class TheBoss
{
public:
    int bossRow;
    int bossColumn;
    int bossHeal;
    int bossFlag;
    char remainingHealChar = 178;
    char goneHealChar = 176;
    
    string bossDraw =

        "             ___        \n"
        "            /   \\\\     \n"
        "       /\\\\ | . . \\\\    \n"
        "     ////\\\\|     ||    \n"
        "   ////   \\\\ ___//\\    \n"
        "  ///      \\\\      \\   \n"
        " ///       |\\\\      |  \n"
        "//         | \\\\  \\   \\ \n"
        "/          |  \\\\  \\   \\\n"
        "           |   \\\\ /   /\n"
        "           |    \\/   / \n"
        "           |     \\\\/|  \n"
        "           |      \\\\|  \n"
        "           |       \\\\  \n"
        "           |        |  \n"
        "           |_________\\ \n";


    string bossDragon =

        "                                             __----~~~~~~~~~~~-___\n"
        "                               .  .  .   ~~//====......      __--\n"
        "                                \\_|//     |||\\\\  ~~~~~~::::./~\n"
        "               ___-==_       _-~o~  \\/    |||  \\\\          /~-\n"
        "       __---~~~.==~||\\=_    -_--~/_-~|-   |\\\\   \\\\        /~\n"
        "   _-~~     .=~    |  \\\\-_    '-~7  /-   /  ||    \\      /\n"
        " .~       .~       |   \\\\ -_    /  /-   /   ||      \\   /\n"
        "/  ____  /         |     \\\\ ~-_/  /|- _/   .||       \\ /\n"
        "|~~    ~~|--~~~~--_ \\     ~==-/   | \\~--===~~        .\\\n"
        "                   ~-|      /|    |-~\\~~       __--~~    \n"
        "                     |-~~-_/ |    |   ~\\_   _-~            /\\\n"
        "                          /  \\     \\__   \\/~                \\_\n"
        "                      _--~ _/ | .-~~____--~-/                  ~~=.\n"
        "                     ((->/~   '.|||' -_|    ~~-/ ,                ||\n"
        "                                -_     ~\\      ~~---l__i__i__i--~_/\n"
        "                                _-~-__   ~)  \\--______________--~\n"
        "                              //.-~~~-~_--~- |-------~~~~~~~~\n"
        "                                     //-~~~--\\\n";

    

    void DrawTheBoss()
    {
        r = this->bossRow;
        c = this->bossColumn;

        if (this->bossFlag)
        {
            for (i = 0; i < this->bossDraw.length(); i++)
            {
                if (this->bossDraw[i] != '\n')
                    map[r][c++] = this->bossDraw[i];

                if (this->bossDraw[i] == '\n')
                {
                    r++;
                    c = this->bossColumn;
                }
            }

            for (i = 0; i < 30; i++)
                if (i <= this->bossHeal)
                    map[this->bossRow - 1][this->bossColumn + i - 4] = this->remainingHealChar;
                else
                    map[this->bossRow - 1][this->bossColumn + i - 4] = this->goneHealChar;
        }

        
    }


};

TheBoss boss;

void setBossPosition()
{
    boss.bossColumn = 1255;
    boss.bossRow = 25;
    boss.bossHeal = 30;
    boss.bossFlag = 1;
}

class NonoBoss
{
public:

    int nonoRow;
    int nonoColumn;
    int flagNono;
    int nonoHeal;

    unsigned nonoBoss[300] =
    { 32,32,32,32,32,32,32,32,95,95,95,10,
        32,32,32,32,32,32,32,47,32,32,32,92,92,10,
        32,32,32,47,92,92,124,32,46,32,46,32,92,92,10,
        32,32,47,47,32,92,92,32,95,95,95,47,47,92,10,
        32,47,47,32,32,32,92,92,32,32,32,32,92,32,92,10,
        47,32,32,32,32,32,124,92,92,32,32,32,47,32,47,10,
        32,32,32,32,32,32,124,32,92,32,32,47,32,47,10,
        32,32,32,32,32,32,124,32,32,92,92,32,47,124,10,
        32,32,32,32,32,32,124,32,32,32,92,92,32,124,10,
        32,32,32,32,32,32,124,32,32,32,32,32,32,124,10,
        32,32,32,32,32,32,124,95,95,95,95,95,95,124,0 };

    void DrawNonoBoss()
    {

        r = this->nonoRow;
        c = this->nonoColumn;

        if (this->flagNono)
        for (i = 0; this->nonoBoss[i] != 0; i++)
        {
            if (this->nonoBoss[i] != 10)
                map[r][c++] = this->nonoBoss[i];

            if (this->nonoBoss[i] == 10)
            {
                r++;
                c = this->nonoColumn;
            }
        }
    }
};

NonoBoss nono;

void setNono()
{
    nono.flagNono = 1;
    nono.nonoHeal = 20;
    nono.nonoRow = 30;
    nono.nonoColumn = 1233;
}

int flagNonoMove = 1;

void nonoLogic()
{
    if (megaFireMode == 1)
    {
        if (hero.flagSingleBulletDraw)
        if (hero.bulletColumn >= nono.nonoColumn && hero.bulletColumn <= nono.nonoColumn + 10)
        {
            
                PlaySound(TEXT("sounds\\09 - EnemyDamage.wav"), NULL, SND_ASYNC);
            hero.flagSingleBulletDraw = 0;
            nono.nonoHeal -= 5;
            boss.bossHeal -= 2;

            if (boss.bossHeal <= 0)
            {
                boss.bossFlag = 0;
                PlaySound(TEXT("sounds\\smb_world_clear.wav"), NULL, SND_ASYNC);
                backToMenu = true;
            }

            if (nono.nonoHeal <= 0)
            {
                nono.flagNono = 0;
                if (boss.bossFlag)
                    setNono();
            }
        }
    }

    if (megaFireMode == 2)
    {
        if (megaBullets[0].flagDrawMegaManBullet)
        if (megaBullets[0].megaManBulletColumn >= nono.nonoColumn && megaBullets[0].megaManBulletColumn <= nono.nonoColumn + 10)
        {
            PlaySound(TEXT("sounds\\09 - EnemyDamage.wav"), NULL, SND_ASYNC);
            megaBullets[0].flagDrawMegaManBullet = 0;
            nono.nonoHeal -= 20;
            boss.bossHeal -= 6;

            if (boss.bossHeal <= 0)
            {
                boss.bossFlag = 0;
                PlaySound(TEXT("sounds\\smb_world_clear.wav"), NULL, SND_ASYNC);
                backToMenu = true;
            }

            if (nono.nonoHeal <= 0)
            {
                nono.flagNono = 0;
                if (boss.bossFlag)
                    setNono();
            }
        }
    }

    if (hero.getHeroColumn() + 23 >= nono.nonoColumn && hero.getHeroColumn() <= nono.nonoColumn)
    {
        heroHealth.setRemainingHealTo(heroHealth.getRemainingHeal() - 2);
    }

    if (flagNonoMove)
        nono.nonoColumn -= 3;
    

    if (nono.nonoColumn <= 1130)
        flagNonoMove = 0;

    if (!flagNonoMove)
        nono.nonoColumn += 3;

    if (nono.nonoColumn >= 1230)
        flagNonoMove = 1;

    

}

void GravityToGround(int r, int c, int w)
{
    int stillHeal = heroHealth.getRemainingHeal();
    if (map[r + 1][c] == 32)
    {
        r += 2;
        batEnemy[w].setBulletBatRowTo(r);
    }
    else
    {
        if (r + 1 >= hero.getHeroRow() && c >= hero.getHeroColumn() - 2 && c <= hero.getHeroColumn() + 9)
        {
            if (map[r][c] = batEnemy->getBatBulletChar())
            {
                stillHeal -= bulletDamage;
                heroHealth.setRemainingHealTo(stillHeal);
            }
        }

        batEnemy[w].setBulletBatRowTo(batEnemy[w].getBatRow() + 4);
    }
}

void setBatEnemiesPositions()
{

    for (i = 0, tempRow = 13, tempColumn = 105; i < batsNumber; tempRow += 2, tempColumn += 24, i++)
    {
        if (i == 2)
            tempRow = 10;

        batEnemy[i].setBatRowTo(tempRow);
        batEnemy[i].setBatColumnTo(tempColumn);
        batEnemy[i].setBulletBatFlagTo(1);

        batEnemy[i].setBulletBatRowTo(batEnemy[i].getBatRow() + 4);
        batEnemy[i].setBulletBatColumnTo(batEnemy[i].getBatColumn() + 9);

        batEnemy[i].setBatFlagTo(1);
        batEnemy[i].setBatHealTo(2);
    }
}

void DrawBatEnemies(int loop)
{

    for (int p = 0; p < loop; p++)
    {
        batEnemy[p].DrawBatEnemy(batEnemy[p].getBatRow(), batEnemy[p].getBatColumn());

        GravityToGround(batEnemy[p].getBulletBatRow(), batEnemy[p].getBulletBatColumn(), p);
    }

}

void DrawBatBullets(int loop)
{
    for (int p = 0; p < loop; p++)
    {
        batEnemy[p].DrawBatBullet(batEnemy[p].getBulletBatRow(), batEnemy[p].getBulletBatColumn());

        GravityToGround(batEnemy[p].getBulletBatRow(), batEnemy[p].getBulletBatColumn(), p);
    }

}

////////////////////////////////////////////////////////////////
void PrintingMap()
{
    system("cls");

    int flag = 0;
    b = hero.getHeroColumn();


    if (b - 50 < 0)
    {
        b = 50;
        flag = 1;
    }

    if (flag == 1)
    {
        heroHealth.setHeroHealthBarColumnTo(165);
        flag = 0;
    }

    if (flag == 0)
        heroHealth.setHeroHealthBarColumnTo(b + 165 - 50);


    if (flagNewHero == 0)
    {
        for (r = 0; r < rows; r++)
        {
            for (c = b - 50; c < b + 250; c++)
            {
                SetConsoleTextAttribute(windowHandle, 15);

                // Hat
                if (r == hero.getHeroRow() && c >= hero.getHeroColumn() && c <= hero.getHeroColumn() + 11)
                {
                    SetConsoleTextAttribute(windowHandle, 4);
                }
                else if (r > hero.getHeroRow() && r < hero.getHeroRow() + 3 && c >= hero.getHeroColumn() && c <= hero.getHeroColumn() + 11)
                {
                    // Face
                    SetConsoleTextAttribute(windowHandle, 14);
                }
                else if (r > hero.getHeroRow() + 3 && r < hero.getHeroRow() + 6 && c >= hero.getHeroColumn() && c <= hero.getHeroColumn() + 11)
                {
                    // Body
                    SetConsoleTextAttribute(windowHandle, 1);
                }
                else if (r > hero.getHeroRow() + 6 && r < hero.getHeroRow() + 8 && c >= hero.getHeroColumn() && c <= hero.getHeroColumn() + 11)
                {   // Legs
                    SetConsoleTextAttribute(windowHandle, 6);
                }
                else if (r == heroHealth.getHeroHealthBarRow() && c >= heroHealth.getHeroHealthBarColumn() - 5 && c <= heroHealth.getHeroHealthBarColumn() + 25)
                {   // Health Bar
                    SetConsoleTextAttribute(windowHandle, 4);
                }
                else if (c > art.getTunnelColumn() && c < art.getTunnelColumn() + 200)
                {   // Tunnel
                    if (r == art.getTunnelRow() + 1 || r == art.getTunnelRow() + 4 || r == art.getTunnelRow() + 20 || r == art.getTunnelRow() + 23)
                        SetConsoleTextAttribute(windowHandle, 5);
                }
                else if (c > art.squareColumn + 1 && c < art.squareColumn + 166)
                {
                    if (r == art.squareRow + 1 || r == art.squareRow + 3 || r == art.squareRow + 36 || r == art.squareRow + 38)
                        SetConsoleTextAttribute(windowHandle, 5);
                }
                else if (c > art.anotherSquareColumn + 1 && c < art.anotherSquareColumn + 166)
                {
                    if (r == art.anotherSquareRow + 1 || r == art.anotherSquareRow + 3 || r == art.anotherSquareRow + 36 || r == art.anotherSquareRow + 38)
                        SetConsoleTextAttribute(windowHandle, 5);
                }
                else if (c >= nono.nonoColumn && c <= nono.nonoColumn + 15 && r >= nono.nonoRow && r <= nono.nonoRow + 10)
                {
                    SetConsoleTextAttribute(windowHandle, 13);
                }
                else if (c >= boss.bossColumn && c <= boss.bossColumn + 22 && r >= boss.bossRow && r <= boss.bossRow + 15)
                {
                    SetConsoleTextAttribute(windowHandle, 5);
                }
                else
                    SetConsoleTextAttribute(windowHandle, 15);

                // Bats
                for (i = 0; i < batsNumber; i++)
                    if (r >= batEnemy[i].getBatRow() && r <= batEnemy[i].getBatRow() + 4 && c >= batEnemy[i].getBatColumn() && c <= batEnemy[i].getBatColumn() + 19)
                        SetConsoleTextAttribute(windowHandle, 13);

                // Frogs
                for (i = 0; i < frogsNumber; i++)
                    if (r >= frogEnemy[i].getFrogRow() && r <= frogEnemy[i].getFrogRow() + 6 && c >= frogEnemy[i].getFrogColumn() && c <= frogEnemy[i].getFrogColumn() + 18)
                        SetConsoleTextAttribute(windowHandle, 2);

                for (i = 0; i < coinsNumber; i++)
                {
                    if (r == singleCoin[i].coinRow && c == singleCoin[i].coinColumn && singleCoin[i].flagCoin == 1)
                        SetConsoleTextAttribute(windowHandle, 6);
                    if (r == singleCoin[i].coinRow && c == singleCoin[i].coinColumn && singleCoin[i].flagCoin == 0)
                        SetConsoleTextAttribute(windowHandle, 15);
                }
                

                cout << map[r][c];
            }
        }
    }
    else
    {
        for (r = 0; r < rows; r++)
        {
            for (c = b - 50; c < b + 250; c++)
            {
                SetConsoleTextAttribute(windowHandle, 15);

                // Hat
                if (r >= hero.getHeroRow() && r <= hero.getHeroRow() + 8 && c >= hero.getHeroColumn() && c <= hero.getHeroColumn() + 29)
                {
                    SetConsoleTextAttribute(windowHandle, 1);
                }
                else if (r == heroHealth.getHeroHealthBarRow() && c >= heroHealth.getHeroHealthBarColumn() - 8 && c <= heroHealth.getHeroHealthBarColumn() + 33)
                {   // Health Bar
                    SetConsoleTextAttribute(windowHandle, 4);
                }
                else if (c > art.getTunnelColumn() && c < art.getTunnelColumn() + 200)
                {   // Tunnel
                    if (r == art.getTunnelRow() + 1 || r == art.getTunnelRow() + 4 || r == art.getTunnelRow() + 20 || r == art.getTunnelRow() + 23)
                        SetConsoleTextAttribute(windowHandle, 5);
                }
                else if (c > art.squareColumn + 1 && c < art.squareColumn + 166)
                {
                    if (r == art.squareRow + 1 || r == art.squareRow + 3 || r == art.squareRow + 36 || r == art.squareRow + 38)
                        SetConsoleTextAttribute(windowHandle, 5);
                }
                else if (c > art.anotherSquareColumn + 1 && c < art.anotherSquareColumn + 166)
                {
                    if (r == art.anotherSquareRow + 1 || r == art.anotherSquareRow + 3 || r == art.anotherSquareRow + 36 || r == art.anotherSquareRow + 38)
                        SetConsoleTextAttribute(windowHandle, 5);
                }
                
                else
                    SetConsoleTextAttribute(windowHandle, 15);
                 if (c >= nono.nonoColumn && c <= nono.nonoColumn + 15 && r >= nono.nonoRow && r <= nono.nonoRow + 10)
                {
                    SetConsoleTextAttribute(windowHandle, 13);
                }
                 if (c >= boss.bossColumn && c <= boss.bossColumn + 22 && r >= boss.bossRow && r <= boss.bossRow + 15)
                {
                    SetConsoleTextAttribute(windowHandle, 4);
                }
                // Bats
                for (i = 0; i < batsNumber; i++)
                    if (r >= batEnemy[i].getBatRow() && r <= batEnemy[i].getBatRow() + 4 && c >= batEnemy[i].getBatColumn() && c <= batEnemy[i].getBatColumn() + 19)
                        SetConsoleTextAttribute(windowHandle, 13);

                // Frogs
                for (i = 0; i < frogsNumber; i++)
                    if (r >= frogEnemy[i].getFrogRow() && r <= frogEnemy[i].getFrogRow() + 6 && c >= frogEnemy[i].getFrogColumn() && c <= frogEnemy[i].getFrogColumn() + 18)
                        SetConsoleTextAttribute(windowHandle, 2);

                for (i = 0; i < coinsNumber; i++)
                {
                    if (r == singleCoin[i].coinRow && c == singleCoin[i].coinColumn && singleCoin[i].flagCoin == 1)
                        SetConsoleTextAttribute(windowHandle, 6);
                    if (r == singleCoin[i].coinRow && c == singleCoin[i].coinColumn && singleCoin[i].flagCoin == 0)
                        SetConsoleTextAttribute(windowHandle, 15);
                }
                cout << map[r][c];
            }
        }

    }

    flagMegaManUp = 0;
    flagMegaManShoot = 0;
}

class LootCrate
{
public:
    int crateRow;
    int crateColumn;
    int flagCrate;
    int flagCrateMessage;

    string crateArt =
        " _____\n"
        "|  _  |\n"
        "| |_| |\n"
        "|_____|";

    string crateMessate =
        "  ______________\n"
        " |              |\n"
        " |  1- 20 Coins |\n"
        " |   2- Laser   |\n"
        " |______  ______|\n"
        "        \\/ \n";

    void DrawLootCrate()
    {
        r = this->crateRow;
        c = this->crateColumn;

        for (i = 0; i < this->crateArt.length(); i++)
        {
            if (this->crateArt[i] != '\n')
                map[r][c++] = this->crateArt[i];

            if (this->crateArt[i] == '\n')
            {
                r++;
                c = this->crateColumn;
            }
        }
    }

    void DrawCrateMessage()
    {
        while (1)
        {
            PrintingMap();
            r = this->crateRow - 6;
            c = this->crateColumn - 5;

            for (i = 0; i < this->crateMessate.length(); i++)
            {
                if (this->crateMessate[i] != '\n')
                    map[r][c++] = this->crateMessate[i];

                if (this->crateMessate[i] == '\n')
                {
                    r++;
                    c = this->crateColumn - 5;
                }
            }

            if (GetAsyncKeyState(0x4F))
            {
                a = 0;
                break;
            }

            if (GetAsyncKeyState(0x31))
            {
                heroCoins += 20;
                a = 0;
                PlaySound(TEXT("sounds\\10coins.wav"), NULL, SND_ASYNC);
                break;
            }

            if (GetAsyncKeyState(0x32))
            {
                flagLaser = 1;
                PlaySound(TEXT("sounds\\laser.wav"), NULL, SND_ASYNC);
                a = 0;
                break;
            }
        }
    }

};

LootCrate lootCrates[1];
int cratesNumber = 1;

void setLootCratesPositions()
{
    for (i = 0, tempRow = 41, tempColumn = 220; i < cratesNumber; tempRow += 2, tempColumn += 25, i++)
    {
        lootCrates[i].crateRow = tempRow;
        lootCrates[i].crateColumn = tempColumn;
        lootCrates[i].flagCrate = 1;
        lootCrates[i].flagCrateMessage = 0;
    }
}

void DrawLootCrates(int loop)
{
    int p;
    for (p = 0; p < loop; p++)
    {
        if (lootCrates[p].flagCrate == 1)
            lootCrates[p].DrawLootCrate();

        if (a == 1 && lootCrates[p].flagCrate == 1)
        {
            PlaySound(TEXT("sounds\\EnterKey.wav"), NULL, SND_ASYNC);
            lootCrates[p].DrawCrateMessage();
            lootCrates[p].flagCrate = 0;
        }

    }
}

void Checkdamegedog(int i) {

    if (hero.getHeroColumn() + 11 >= dogEnemy[i].getDogColumn() && hero.getHeroColumn() <= dogEnemy[i].getDogColumn())
    {
        heroHealth.setRemainingHealTo(heroHealth.getRemainingHeal() - 2);
    }



}

void Gravity(int gravityRow, int gravityColumn)
{

    if (map[gravityRow + 9][gravityColumn] != ' ' || map[gravityRow + 9][gravityColumn + 12] != ' ')
        hero.setJumpLimitCounterTo(0);


    if (map[gravityRow + 9][gravityColumn] == ' ' && map[gravityRow + 9][gravityColumn + 12] == ' ')
    {
        flagMegaManUp = 1;
        gravityRow += 2;
        hero.setHeroRowTo(gravityRow);
    }
}

void GeneralDraw()
{
    hero.DrawHero();
    //art.DrawSky();
    art.DrawGround();
    art.Drawladder();
    art.DrawTunnle();
    art.DrawSquare();
    art.DrawAnotherSquare();
    art.DrawLevelLadders();
    art.waslaConnect();
    art.DrawobstacleSeaLevelH();
    //art.DrawobstacleSeaLevelV();
    DrawCoins(singleCoinI);
    DrawLootCrates(cratesNumber);
    DrawHurts(flagDrawHurts1, flagDrawHurts2, flagDrawHurts3, flagDrawHurts4, ctHurts1, ctHurts2, ctHurts3, ctHurts4);
    boss.DrawTheBoss();
    nono.DrawNonoBoss();


    if (hero.getHeroColumn() > 1120 && flagDoorShop == 0)
    {
        flagCloseDoor = 1;

    }

    if (hero.getHeroColumn() < 1120)
    {
        flagDoorShop = 0;
        ctClose = 0;
    }

    if (flagCloseDoor == 1)
        art.DrawCloseFight();

    laser.DrawLaser();

    art.DrawSingleElevator(firstElevatorRow, firstElevatorColumn);
    art.DrawSingleElevator(secondElevatorRow, secondElevatorColumn);
    //art.DrawSingleElevator(thirdElevatorRow, thirdElevatorColumn);

    DrawBatBullets(batsNumber);

    DrawFrogEnemies(frogsNumber);
    DrawDogEnemies(dogsNumber);
    hero.DrawHero();
    DrawBatEnemies(batsNumber);
    hero.BulletDraw();

    DrawObstacles(obstaclesNumber);
    heroHealth.DrawHealthBar(heroHealth.getRemainingHeal());
    hero.DrawHero();
}

void Menu(int i)
{
    switch (i)
    {
    case 0:
        cout <<


            "                                                                             _____              _____               \n"
            "                                                                            |   | |___ _ _ _   |   __|___ _____ ___ \n"
            "                                                                            | | | | -_| | | |  |  |  | .'|     | -_|\n"
            "                                                                            |_|___|___|_____|  |_____|__,|_|_|_|___|\n\n";



        break;

    case 1:
        cout <<



            "                                                                           _____                  _____     _   _     \n"
            "                                                                          |   __|___ _____ ___   |   __|_ _|_|_| |___ \n"
            "                                                                          |  |  | .'|     | -_|  |  |  | | | | . | -_|\n"
            "                                                                          |_____|__,|_|_|_|___|  |_____|___|_|___|___|\n\n";



        break;

    case 2:
        cout <<


            "                                                                                      _____     _ _____ \n"
            "                                                                                     |     |_ _|_|_   _|\n"
            "                                                                                     |  |  | | | | | |  \n"
            "                                                                                     |__  _|___|_| |_|  \n"
            "                                                                                       |__|            \n\n";

        break;

    default:
        break;
    }


}

void Typing()
{
    system("cls");
    cout << "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";
    string typing = "                                                     on 24 september ,2018 haru , An 11 year old boy first felt the super powers\n\n\n"
        "                                            he had but he wan not confindet at all that he can help someone or change something in the world\n\n\n"
        "                                                let's find out what haru can do to make history and to make his name engraved in history \n\n\n"
        "                                     'if you think you are too small to make a diffrence try going to bed with a mosquito in the room' said by Dalaia Lama \n\n\n";

    PlaySound(TEXT("sounds\\typing.wav"), NULL, SND_ASYNC);
    for (int i = 0; i < typing.length(); i++)
    {
        cout << typing[i];

        if (typing[i] != ' ' && typing[i + 1] != ' ')
            Sleep(60);
    }
    PlaySound(TEXT("sounds\\silence.wav"), NULL, SND_ASYNC);

}

void CurrentFiringMode()
{
    // Key T
    if (GetAsyncKeyState(0x54) && flagNewHero == 0)
    {
        PlaySound(TEXT("sounds\\SwitchMenu.wav"), NULL, SND_ASYNC);
        hero.firingMode++;
        if (hero.firingMode == modesNumber + 1)
            hero.firingMode = 1;
    }

    if (GetAsyncKeyState(0x54) && flagNewHero == 1)
    {
        PlaySound(TEXT("sounds\\SwitchMenu.wav"), NULL, SND_ASYNC);
        megaFireMode++;
        if (megaFireMode == megaModesNumber + 1)
            megaFireMode = 1;
    }
}


//void EricSpeech()
//{
//    string Eric =
//
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣦⡀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣿⣿⣷⣄⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⠿⠿⣟⣤⣶⣤⣤⢠⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⢿⣫⣶⣿⣿⣿⣿⣿⣿⡿⣾⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠚⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣶⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣷⣿⣿⣿⣿⣿⣳⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⢿⣯⣿⣿⣽⣿⣿⣟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⡏⠁⢸⣿⣿⣿⣿⣿⣟⣛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣽⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠟⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢇⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⡿⢿⣿⣿⣿⣟⣿⣿⣿⣿⣿⣿⣿⣿⢟⣰⣿⣿⣷⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣾⣿⣏⣷⣿⣿⣿⣿⣿⣿⣿⣿⠿⢛⣩⣶⣿⣿⣿⣿⢿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣿⣿⣿⣿⣏⣛⣿⣿⣿⣿⣿⣿⣿⣴⣿⣿⣿⠿⠛⣩⣤⣤⣄⠈⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣦⣌⠻⢿⣿⣛⣏⣿⣿⣿⣵⡿⠿⠛⣋⣥⣾⣾⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣷⣄⠛⣿⣿⠏⠝⢋⣴⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⡟⠛⣷⣤⣡⣤⡞⢛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⡿⠀⣸⣿⣿⣿⣿⣯⢸⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⢹⢉⣿⠐⢠⣿⣿⣿⣿⣿⣿⣘⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⡏⠈⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⡇⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⡇⠀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿⡇⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⢀⣼⣿⣿⣿⣿⣿⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⣠⣿⡟⠛⠋⠉⠙⠟⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢂⣾⣿⣿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⣿⣿⣿⡿⠟⠛⠓⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡁⢾⠟⣩⣴⣶⣶⣬⡙⠻⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⣿⣿⣯⣴⠟⣥⠇⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡤⠈⠙⠛⠻⠿⢿⣿⣷⣌⠙⢿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⢰⡿⠻⢛⣠⣾⠏⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⣋⣀⣴⣾⣦⣀⠈⡑⢶⣤⣌⣙⠓⢸⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⢸⣧⣴⣾⣿⠃⣠⣶⣤⣉⣛⠛⠻⣿⣿⣿⡿⠿⠟⣉⠻⣿⡏⢰⣾⣿⣿⣿⣿⣿⣿⣶⣼⣦⡙⢿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⣿⣿⣿⣿⠃⣴⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣾⣿⣿⣿⣧⢸⠁⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡘⣿⣿⣿⣿⣿⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠸⣿⣿⣿⠁⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⣸⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⢿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠙⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⢿⡇⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣾⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠻⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠃⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣀⠉⠻⢿⡿⡿⠿⠟⢛⣉⣉⣩⣤⣄⣄⠀⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣴⣶⣶⣾⣿⠿⠿⠛⡉⢡⣴⣾⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠻⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠟⠛⠉⠀⠰⠿⠇⠀⠘⠛⠛⣿⣿⣄⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⣀⡘⠛⠒⠲⠤⠤⢬⣍⡉⠉⠉⠉⠉⠉⣉⣉⣉⣉⣉⣉⣁⣤⣴⣤⣶⣶⣶⣦⠸⣿⣷⣶⣾⣯⢿⣿⣿⣿⣷⣶⣤⣄⣀⣀⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣶⣶⣷⣶⣶⣾⣿⡇⢯⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⠸⣿⣿⣿⣿⣧⢿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⢀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣯⣝⠻⢿⣿⣿⣧⠘⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣽⣿⣿⣿⣿⡆⣿⣿⣿⣿⣿⣿⣷⣶⣶⣿⡟⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣧⣍⣙⠛⠿⢶⣬⣙⠛⠄⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣭⣭⣤⡤⣹⣿⣿⣿⣿⣿⣿⠛⠛⠃⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣧⣤⣄⣉⠙⠦⠀⢈⠛⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⢿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡆⠈⣙⠲⢄⡙⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡘⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀\n"
//        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡘⢷⣦⣌⡑⠌⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡜⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀\n";
//
//    PlaySound(TEXT("sounds\\ErwinSpeech.wav"), NULL, SND_ASYNC);
//
//    cout << "\n\n\n\n\n";
//    cout << EricSpeech;
//
//    for (i = 0; i < 100; i++)
//        Sleep(100);
//}

int GetLevel()
{
    //EricSpeech();

    while (true)
    {
        system("cls");

        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 6);
        cout << "\n\n\n\n\n\n\n"


            "                                                          .----------------.  .----------------.  .-----------------. .----------------. \n"
            "                                                     | .--------------. || .--------------. || .--------------. || .--------------. |\n"
            "                                                         | | ____    ____ | || |  _________   | || | ____  _____  | || | _____  _____ | |\n"
            "                                                     | ||_   \\  /   _|| || | |_   ___  |  | || ||_   \\|_   _| | || ||_   _||_   _|| |\n"
            "                                                     | |  |   \\/   |  | || |   | |_  \\_|  | || |  |   \\ | |   | || |  | |    | |  | |\n"
            "                                                     | |  | |\\  /| |  | || |   |  _|  _   | || |  | |\\ \\| |   | || |  | '    ' |  | |\n"
            "                                                     | | _| |_\\/_| |_ | || |  _| |___/ |  | || | _| |_\\   |_  | || |   \\ `--' /   | |\n"
            "                                                     | ||_____||_____|| || | |_________|  | || ||_____|\\____| | || |    `.__.'    | |\n"
            "                                                     | |              | || |              | || |              | || |              | |\n"
            "                                                     | '--------------' || '--------------' || '--------------' || '--------------' |\n"
            "                                                          '----------------'  '----------------'  '----------------'  '----------------' \n\n\n\n";

        for (int i = 0; i < 3; i++)
        {
            if (i == LevelPointer)
            {
                if (i != 2)
                    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 3);
                else
                    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 4);

                Menu(i);
            }
            else
            {
                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
                Menu(i);
            }
        }

        while (true)
        {
            if (GetAsyncKeyState(VK_UP))
            {
                LevelPointer--;
                PlaySound(TEXT("sounds\\SwitchMenu.wav"), NULL, SND_ASYNC);

                if (LevelPointer == -1)
                {
                    LevelPointer = 2;
                }
                break;
            }
            else if (GetAsyncKeyState(VK_DOWN))
            {
                LevelPointer++;
                PlaySound(TEXT("sounds\\SwitchMenu.wav"), NULL, SND_ASYNC);

                if (LevelPointer == 3)
                {
                    LevelPointer = 0;
                }
                break;
            }
            else if (GetAsyncKeyState(VK_RETURN))
            {
                PlaySound(TEXT("sounds\\EnterKey.wav"), NULL, SND_ASYNC);

                switch (LevelPointer)
                {
                case 0:
                    return 1;

                case 1:
                    return 2;

                case 2:
                    return 3;
                }
            }
        }
        Sleep(160);
    }
}

void يُتبع()
{
    system("cls");
    cout << "\n\n\n\n\n\n\n\n";
    cout <<




        "                                                                                                           @@@@@@@@                         \n"
        "                                                                                                           @@@@@@@@                          \n"
        "                                                                                                           @@@@@@@@                          \n"
        "                                                                                                                                             \n"
        "                                                                                                           @@@@@@@@                          \n"
        "                                                                                                           @@@@@@@@                          \n"
        "                                                                                                           @@@@@@@@                          \n"
        "                                                             @@@@@@@@@@@                                                                     \n"
        "                                                          @@@@@@@@@@@@@@@@@             @@@@@@@            @@@@@@@@           @@@@@@@@       \n"
        "                                                        @@@@@@@@@@@@@@@@@@@@            @@@@@@@            @@@@@@@@           @@@@@@@@       \n"
        "                                                       @@@@@@@        @@@@@@@           @@@@@@@            @@@@@@@@           @@@@@@@@       \n"
        "                                                       @@@@@@@        @@@@@@            @@@@@@@            @@@@@@@@           @@@@@@@@       \n"
        "                                                       @@@@@@@                          @@@@@@@            @@@@@@@@           @@@@@@@@       \n"
        "                                                       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       \n"
        "                                                         #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       \n"
        "                                                       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        \n"
        "                                                     .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@          \n"
        "                                                     %@@@@@@%                                                                                \n"
        "                                                     (@@@@@@@@%##(((((((((*.           @@@@@                            .#@@#    /@@%,       \n"
        "                                                      &@@@@@@@@@@@@@@@@@@@@@@&        @@@@@@@                          /@@@@@@, @@@@@@%      \n"
        "                                                       ,@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@(                          %@@@@%  *@@@@@.      \n"
        "                                                           ,/%@@@@@@@@@@@@%/.           .,,                                                  \n\n\n\n\n\n\n\n\n\n\n\n\n";
}

void Movedogs() {
    for (int i = 0; i < dogsNumber; i++)
    {
        dogEnemy[i].MoveDog();
        Checkdamegedog(i);
    }
}

void SetUp()
{
    srand(time(0));
    LevelPointer = 0;
    shopPointer = 0;
    megaFireMode = 1;
    megaModesNumber = 1;
    modesNumber = 1;
    modeSky = 1;
    flagMegaManUp = 0;
    flagDoorShop = 0;
    bulletsMegaControl = 0;
    flagDrawHurts1 = 1; ctHurts1 = 0;
    flagDrawHurts2 = 1; ctHurts2 = 3;
    flagDrawHurts3 = 1; ctHurts3 = 5;
    flagDrawHurts4 = 1; ctHurts4 = 1;

    flagLaser = 0;
    singleCoinI = 0;
    ctClose = 0;
    heroOrCar = 1;
    flagCloseDoor = 0;
    flagMegaManShoot = 0;

    GameOver = false;
    PlayerDead = false;
    setNono();
    SetMegaManBullets();
    setBatEnemiesPositions();
    setFrogEnemiesPositions();
    setObstaclesPositions();
    setDogEnemiesPositions();
    setHurtPositions();
    setLootCratesPositions();
    setBossPosition();

    hero.setHeroRowTo(28);
    hero.setHeroColumnTo(1);
    laser.setLaser();

    heroHealth.setHeroLifesTo(3);
    heroHealth.setHeroHealthBarRowTo(3);
    heroHealth.setHeroHealthBarColumnTo(165);
    heroHealth.setRemainingHealTo(20);

    backToMenu = false;
}

void SetUpGamePlay()
{
    srand(time(0));
    LevelPointer = 0;
    modeSky = 1;
    flagNewHero = 0;
    flagMegaManShoot = 0;
    flagDoorShop = 0;
    flagCloseDoor = 0;
    bulletsMegaControl = 0;
    megaFireMode = 1;
    flagDrawHurts1 = 1; ctHurts1 = 0;
    flagDrawHurts2 = 1; ctHurts2 = 3;
    flagDrawHurts3 = 1; ctHurts3 = 5;
    flagDrawHurts4 = 1; ctHurts4 = 1;

    ctClose = 0;
    flagMegaManUp = 0;
    heroOrCar = 1;
    GameOver = false;
    PlayerDead = false;
    setNono();
    SetMegaManBullets();
    setBatEnemiesPositions();
    setFrogEnemiesPositions();
    setDogEnemiesPositions();
    setObstaclesPositions();
    setCoinsPositions(singleCoinI, 10, 28, 300);
    setCoinsPositions(singleCoinI, 17, 41, 720);
    setCoinsPositions(singleCoinI, 17, 29, 720);
    setLootCratesPositions();
    setHurtPositions();
    setBossPosition();
    //flagNewHero = 1;
    hero.setHeroRowTo(33);
    hero.setHeroColumnTo(3);

    laser.setLaser();

    //heroHealth.setHeroLifesTo(3);
    heroHealth.setHeroHealthBarRowTo(1);
    heroHealth.setHeroHealthBarColumnTo(165);
    heroHealth.setRemainingHealTo(20);
}

void ChangeMapLocations()
{
    if (GetAsyncKeyState(0x31))
    {
        hero.setHeroColumnTo(250);
        hero.setHeroRowTo(33);
    }
    if (GetAsyncKeyState(0x32))
    {
        hero.setHeroColumnTo(300);
        hero.setHeroRowTo(25);
    }
    if (GetAsyncKeyState(0x33))
    {
        hero.setHeroColumnTo(500);
        hero.setHeroRowTo(25);
    }
    if (GetAsyncKeyState(0x34))
    {
        hero.setHeroColumnTo(800);
        hero.setHeroRowTo(24);
    }
    if (GetAsyncKeyState(0x35))
    {
        hero.setHeroRowTo(8);
        hero.setHeroColumnTo(976);
    }
    if (GetAsyncKeyState(0x36))
    {
        hero.setHeroRowTo(24);
        hero.setHeroColumnTo(1200);
        flagNewHero = 1;
    }
}

void هيا_بنا_نلعب()
{
    int herolifes = 3;
    while (!GameOver)
    {
        
        switch (GetLevel())
        {
            
        case 1:
            SetUp();
            //Typing();
            while (heroHealth.getHeroLifes())
            {
                SetUpGamePlay();

                while (!PlayerDead)
                {
                    ChangeMapLocations();
                    CurrentFiringMode();
                    ClearMap();
                    if (flagNewHero == 1 && GetAsyncKeyState(0x46))
                    {
                        flagMegaManShoot = 1;
                        hero.setBulletsPositions();

                        if (megaFireMode == 1)
                        {
                            PlaySound(TEXT("sounds\\bumb.wav"), NULL, SND_ASYNC);
                            hero.flagSingleBulletDraw = 1;
                            hero.bulletColumn = hero.getHeroColumn() + 30;
                            hero.bulletRow = hero.getHeroRow() + 4;
                            megaBullets[bulletsMegaControl].flagDrawMegaManBullet = 0;
                        }

                        if (megaFireMode == 2)
                        {
                            hero.flagSingleBulletDraw = 0;
                            megaBullets[bulletsMegaControl].flagDrawMegaManBullet = 1;
                            PlaySound(TEXT("sounds\\bumb.wav"), NULL, SND_ASYNC);
                            UpdateMegaManBullets(bulletsMegaControl);
                            //this->startBulletColumn = this->bulletColumn;
                        }
                    }

                    //DrawMegaManBullets();
                    nonoLogic();
                    
                    GeneralDraw();
                    DrawMegaManBullets();
                    MoveMegaManBullets();
                    PrintingMap();

                    //cout << hero.firingMode << endl;
                    hero.moveElevator(firstElevatorRow, firstElevatorColumn, 1);
                    hero.moveElevator(secondElevatorRow, secondElevatorColumn, 2);
                    //hero.moveElevator(thirdElevatorRow, thirdElevatorColumn, 3);
                    
                    hero.HeroActions();
                    CheckLaserWithBat();
                    CheckLaserWithFrog();
                    CheckLaserWithDogs();
                    CheckHurtsDamage();
                    Movedogs();

                    laser.setLaserPositions(hero.getHeroRow(), hero.getHeroColumn());

                    Gravity(hero.getHeroRow(), hero.getHeroColumn());

                    //hero.UpdateBulletPosition();

                    if (GetAsyncKeyState(VK_BACK))
                    {
                        PlaySound(TEXT("sounds\\BackButton.wav"), NULL, SND_ASYNC);
                        backToMenu = true;
                    }

                    if (backToMenu == true)
                        break;

                    
                    if (GetAsyncKeyState(0x60))
                    {

                        PlaySound(TEXT("sounds\\mashy.wav"), NULL, SND_ASYNC);
                    }

                    if (heroHealth.getRemainingHeal() <= 0)
                    {
                        heroHealth.setHeroLifesTo(heroHealth.getHeroLifes() - 1);


                        if (heroHealth.getHeroLifes())
                            PlaySound(TEXT("sounds\\die.wav"), NULL, SND_ASYNC);

                        else
                            PlaySound(TEXT("sounds\\gameover.wav"), NULL, SND_ASYNC);
                        PlayerDead = true;

                        PlayerDead = true;

                    }
                }

                if (backToMenu == true)
                {

                    break;
                }
            }
            break;

        case 2:

            break;

        case 3:

            GameOver = true;
            break;

        }
    }
}

int main()
{
    هيا_بنا_نلعب();
}
